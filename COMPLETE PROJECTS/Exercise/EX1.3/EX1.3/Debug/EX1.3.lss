
EX1.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000518  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015a7  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000910  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000874  00000000  00000000  0000259f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000626  00000000  00000000  00002fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008c2  00000000  00000000  000035da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <main>
  64:	0c 94 8a 02 	jmp	0x514	; 0x514 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <button_vidInit>:
* \Parameters (in) : None                                                                            
* \Return value:   : None                                
*******************************************************************************/
void button_vidInit(void)
{
	dio_vidConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	67 e0       	ldi	r22, 0x07	; 7
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	0e 94 aa 00 	call	0x154	; 0x154 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	66 e0       	ldi	r22, 0x06	; 6
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	0e 94 aa 00 	call	0x154	; 0x154 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	65 e0       	ldi	r22, 0x05	; 5
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	0e 94 aa 00 	call	0x154	; 0x154 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON3_PORT,BUTTON3_PIN,INPUT);
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	63 e0       	ldi	r22, 0x03	; 3
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	0e 94 aa 00 	call	0x154	; 0x154 <dio_vidConfigChannel>
  94:	08 95       	ret

00000096 <Button_GetStatus>:
*                                     RELEASED                                  
*******************************************************************************/
button_status_t Button_GetStatus(button_id_t button)
{
	button_status_t status = RELEASED;
	switch (button)
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	71 f0       	breq	.+28     	; 0xb6 <Button_GetStatus+0x20>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <Button_GetStatus+0x10>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	99 f0       	breq	.+38     	; 0xc6 <Button_GetStatus+0x30>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	c9 f0       	breq	.+50     	; 0xd6 <Button_GetStatus+0x40>
  a4:	20 c0       	rjmp	.+64     	; 0xe6 <Button_GetStatus+0x50>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON0_PORT,BUTTON0_PIN) == STD_LOW)
  a6:	67 e0       	ldi	r22, 0x07	; 7
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	0e 94 b8 01 	call	0x370	; 0x370 <dio_dioLevelReadChannel>
  ae:	81 11       	cpse	r24, r1
  b0:	1c c0       	rjmp	.+56     	; 0xea <Button_GetStatus+0x54>
		{
			status = PRESSED;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	08 95       	ret
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON1_PORT,BUTTON1_PIN) == STD_LOW)
  b6:	66 e0       	ldi	r22, 0x06	; 6
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	0e 94 b8 01 	call	0x370	; 0x370 <dio_dioLevelReadChannel>
  be:	81 11       	cpse	r24, r1
  c0:	16 c0       	rjmp	.+44     	; 0xee <Button_GetStatus+0x58>
		{
			status = PRESSED;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON2_PORT,BUTTON2_PIN) == STD_LOW)
  c6:	65 e0       	ldi	r22, 0x05	; 5
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 b8 01 	call	0x370	; 0x370 <dio_dioLevelReadChannel>
  ce:	81 11       	cpse	r24, r1
  d0:	10 c0       	rjmp	.+32     	; 0xf2 <Button_GetStatus+0x5c>
		{
			status = PRESSED;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	08 95       	ret
		status = RELEASED;
	}

	#else
	/*	PULL UP	*/
	if (dio_dioLevelReadChannel(BUTTON3_PORT,BUTTON3_PIN) == STD_LOW)
  d6:	63 e0       	ldi	r22, 0x03	; 3
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	0e 94 b8 01 	call	0x370	; 0x370 <dio_dioLevelReadChannel>
  de:	81 11       	cpse	r24, r1
  e0:	0a c0       	rjmp	.+20     	; 0xf6 <Button_GetStatus+0x60>
	{
		status = PRESSED;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret
* \Return value:   : button_status_t  PRESSED
*                                     RELEASED                                  
*******************************************************************************/
button_status_t Button_GetStatus(button_id_t button)
{
	button_status_t status = RELEASED;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
		{
			status = PRESSED;
		}
		else
		{
			status = RELEASED;
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret
		{
			status = PRESSED;
		}
		else
		{
			status = RELEASED;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret
		{
			status = PRESSED;
		}
		else
		{
			status = RELEASED;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret
	{
		status = PRESSED;
	}
	else
	{
		status = RELEASED;
  f6:	80 e0       	ldi	r24, 0x00	; 0
	}
	#endif
	break;
	}
	return status;
}
  f8:	08 95       	ret

000000fa <buzzer_on>:

void buzzer_on()
{
	#if (BUZZER_HW_CONNECTION == SOURCE)
	{
		dio_vidWriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	66 e0       	ldi	r22, 0x06	; 6
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
 104:	08 95       	ret

00000106 <buzzer_off>:

void buzzer_off()
{
	#if (BUZZER_HW_CONNECTION == SOURCE)
	{
		dio_vidWriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	66 e0       	ldi	r22, 0x06	; 6
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
 110:	08 95       	ret

00000112 <buzzer_start_tune>:
	#endif
}

void buzzer_start_tune()
{
	dio_vidWriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	66 e0       	ldi	r22, 0x06	; 6
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	86 e1       	ldi	r24, 0x16	; 22
 120:	91 e1       	ldi	r25, 0x11	; 17
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <buzzer_start_tune+0x10>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <buzzer_start_tune+0x1a>
 12c:	00 00       	nop
	_delay_ms(700);
	dio_vidWriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	66 e0       	ldi	r22, 0x06	; 6
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
 138:	08 95       	ret

0000013a <buzzer_init>:
#define F_CPU 8000000
#include "util/delay.h"

void buzzer_init()
{
	dio_vidConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	66 e0       	ldi	r22, 0x06	; 6
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 aa 00 	call	0x154	; 0x154 <dio_vidConfigChannel>
	dio_vidWriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	66 e0       	ldi	r22, 0x06	; 6
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
	buzzer_start_tune();
 14e:	0e 94 89 00 	call	0x112	; 0x112 <buzzer_start_tune>
 152:	08 95       	ret

00000154 <dio_vidConfigChannel>:
		DIO_PORTC_REG &= ~mask ;
		DIO_PORTC_REG |= (value<<pos)&mask ;
		break;
		case DIO_PORTD:
		DIO_PORTD_REG &= ~mask ;
		DIO_PORTD_REG |= (value<<pos)&mask ;
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	01 f1       	breq	.+64     	; 0x198 <dio_vidConfigChannel+0x44>
 158:	30 f0       	brcs	.+12     	; 0x166 <dio_vidConfigChannel+0x12>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	b1 f1       	breq	.+108    	; 0x1ca <dio_vidConfigChannel+0x76>
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	09 f4       	brne	.+2      	; 0x164 <dio_vidConfigChannel+0x10>
 162:	4c c0       	rjmp	.+152    	; 0x1fc <dio_vidConfigChannel+0xa8>
 164:	08 95       	ret
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	59 f4       	brne	.+22     	; 0x180 <dio_vidConfigChannel+0x2c>
 16a:	2a b3       	in	r18, 0x1a	; 26
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <dio_vidConfigChannel+0x22>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <dio_vidConfigChannel+0x1e>
 17a:	82 2b       	or	r24, r18
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	08 95       	ret
 180:	2a b3       	in	r18, 0x1a	; 26
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <dio_vidConfigChannel+0x38>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <dio_vidConfigChannel+0x34>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	8a bb       	out	0x1a, r24	; 26
 196:	08 95       	ret
 198:	41 30       	cpi	r20, 0x01	; 1
 19a:	59 f4       	brne	.+22     	; 0x1b2 <dio_vidConfigChannel+0x5e>
 19c:	27 b3       	in	r18, 0x17	; 23
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <dio_vidConfigChannel+0x54>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <dio_vidConfigChannel+0x50>
 1ac:	82 2b       	or	r24, r18
 1ae:	87 bb       	out	0x17, r24	; 23
 1b0:	08 95       	ret
 1b2:	27 b3       	in	r18, 0x17	; 23
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <dio_vidConfigChannel+0x6a>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <dio_vidConfigChannel+0x66>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	87 bb       	out	0x17, r24	; 23
 1c8:	08 95       	ret
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	59 f4       	brne	.+22     	; 0x1e4 <dio_vidConfigChannel+0x90>
 1ce:	24 b3       	in	r18, 0x14	; 20
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <dio_vidConfigChannel+0x86>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <dio_vidConfigChannel+0x82>
 1de:	82 2b       	or	r24, r18
 1e0:	84 bb       	out	0x14, r24	; 20
 1e2:	08 95       	ret
 1e4:	24 b3       	in	r18, 0x14	; 20
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <dio_vidConfigChannel+0x9c>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <dio_vidConfigChannel+0x98>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	84 bb       	out	0x14, r24	; 20
 1fa:	08 95       	ret
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	59 f4       	brne	.+22     	; 0x216 <dio_vidConfigChannel+0xc2>
 200:	21 b3       	in	r18, 0x11	; 17
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <dio_vidConfigChannel+0xb8>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <dio_vidConfigChannel+0xb4>
 210:	82 2b       	or	r24, r18
 212:	81 bb       	out	0x11, r24	; 17
 214:	08 95       	ret
 216:	21 b3       	in	r18, 0x11	; 17
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <dio_vidConfigChannel+0xce>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <dio_vidConfigChannel+0xca>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	81 bb       	out	0x11, r24	; 17
 22c:	08 95       	ret

0000022e <dio_vidWriteChannel>:
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	01 f1       	breq	.+64     	; 0x272 <dio_vidWriteChannel+0x44>
 232:	30 f0       	brcs	.+12     	; 0x240 <dio_vidWriteChannel+0x12>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	b1 f1       	breq	.+108    	; 0x2a4 <dio_vidWriteChannel+0x76>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	09 f4       	brne	.+2      	; 0x23e <dio_vidWriteChannel+0x10>
 23c:	4c c0       	rjmp	.+152    	; 0x2d6 <dio_vidWriteChannel+0xa8>
 23e:	08 95       	ret
 240:	41 11       	cpse	r20, r1
 242:	0c c0       	rjmp	.+24     	; 0x25c <dio_vidWriteChannel+0x2e>
 244:	2b b3       	in	r18, 0x1b	; 27
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <dio_vidWriteChannel+0x22>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <dio_vidWriteChannel+0x1e>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	8b bb       	out	0x1b, r24	; 27
 25a:	08 95       	ret
 25c:	2b b3       	in	r18, 0x1b	; 27
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <dio_vidWriteChannel+0x3a>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <dio_vidWriteChannel+0x36>
 26c:	82 2b       	or	r24, r18
 26e:	8b bb       	out	0x1b, r24	; 27
 270:	08 95       	ret
 272:	41 11       	cpse	r20, r1
 274:	0c c0       	rjmp	.+24     	; 0x28e <dio_vidWriteChannel+0x60>
 276:	28 b3       	in	r18, 0x18	; 24
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <dio_vidWriteChannel+0x54>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <dio_vidWriteChannel+0x50>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	88 bb       	out	0x18, r24	; 24
 28c:	08 95       	ret
 28e:	28 b3       	in	r18, 0x18	; 24
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <dio_vidWriteChannel+0x6c>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <dio_vidWriteChannel+0x68>
 29e:	82 2b       	or	r24, r18
 2a0:	88 bb       	out	0x18, r24	; 24
 2a2:	08 95       	ret
 2a4:	41 11       	cpse	r20, r1
 2a6:	0c c0       	rjmp	.+24     	; 0x2c0 <dio_vidWriteChannel+0x92>
 2a8:	25 b3       	in	r18, 0x15	; 21
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <dio_vidWriteChannel+0x86>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <dio_vidWriteChannel+0x82>
 2b8:	80 95       	com	r24
 2ba:	82 23       	and	r24, r18
 2bc:	85 bb       	out	0x15, r24	; 21
 2be:	08 95       	ret
 2c0:	25 b3       	in	r18, 0x15	; 21
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <dio_vidWriteChannel+0x9e>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <dio_vidWriteChannel+0x9a>
 2d0:	82 2b       	or	r24, r18
 2d2:	85 bb       	out	0x15, r24	; 21
 2d4:	08 95       	ret
 2d6:	41 11       	cpse	r20, r1
 2d8:	0c c0       	rjmp	.+24     	; 0x2f2 <dio_vidWriteChannel+0xc4>
 2da:	22 b3       	in	r18, 0x12	; 18
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <dio_vidWriteChannel+0xb8>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <dio_vidWriteChannel+0xb4>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	82 bb       	out	0x12, r24	; 18
 2f0:	08 95       	ret
 2f2:	22 b3       	in	r18, 0x12	; 18
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <dio_vidWriteChannel+0xd0>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <dio_vidWriteChannel+0xcc>
 302:	82 2b       	or	r24, r18
 304:	82 bb       	out	0x12, r24	; 18
 306:	08 95       	ret

00000308 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	89 f0       	breq	.+34     	; 0x32e <dio_vidFlipChannel+0x26>
 30c:	28 f0       	brcs	.+10     	; 0x318 <dio_vidFlipChannel+0x10>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	c9 f0       	breq	.+50     	; 0x344 <dio_vidFlipChannel+0x3c>
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	11 f1       	breq	.+68     	; 0x35a <dio_vidFlipChannel+0x52>
 316:	08 95       	ret
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 318:	2b b3       	in	r18, 0x1b	; 27
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <dio_vidFlipChannel+0x1c>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <dio_vidFlipChannel+0x18>
 328:	82 27       	eor	r24, r18
 32a:	8b bb       	out	0x1b, r24	; 27
		break;
 32c:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 32e:	28 b3       	in	r18, 0x18	; 24
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <dio_vidFlipChannel+0x32>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <dio_vidFlipChannel+0x2e>
 33e:	82 27       	eor	r24, r18
 340:	88 bb       	out	0x18, r24	; 24
		break;
 342:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 344:	25 b3       	in	r18, 0x15	; 21
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <dio_vidFlipChannel+0x48>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <dio_vidFlipChannel+0x44>
 354:	82 27       	eor	r24, r18
 356:	85 bb       	out	0x15, r24	; 21
		break;
 358:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 35a:	22 b3       	in	r18, 0x12	; 18
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <dio_vidFlipChannel+0x5e>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <dio_vidFlipChannel+0x5a>
 36a:	82 27       	eor	r24, r18
 36c:	82 bb       	out	0x12, r24	; 18
 36e:	08 95       	ret

00000370 <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	79 f0       	breq	.+30     	; 0x392 <dio_dioLevelReadChannel+0x22>
 374:	28 f0       	brcs	.+10     	; 0x380 <dio_dioLevelReadChannel+0x10>
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	a9 f0       	breq	.+42     	; 0x3a4 <dio_dioLevelReadChannel+0x34>
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	e1 f0       	breq	.+56     	; 0x3b6 <dio_dioLevelReadChannel+0x46>
 37e:	24 c0       	rjmp	.+72     	; 0x3c8 <dio_dioLevelReadChannel+0x58>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 380:	89 b3       	in	r24, 0x19	; 25
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <dio_dioLevelReadChannel+0x1a>
 386:	95 95       	asr	r25
 388:	87 95       	ror	r24
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <dio_dioLevelReadChannel+0x16>
 38e:	81 70       	andi	r24, 0x01	; 1
		break;
 390:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 392:	86 b3       	in	r24, 0x16	; 22
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <dio_dioLevelReadChannel+0x2c>
 398:	95 95       	asr	r25
 39a:	87 95       	ror	r24
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <dio_dioLevelReadChannel+0x28>
 3a0:	81 70       	andi	r24, 0x01	; 1
		break;
 3a2:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 3a4:	83 b3       	in	r24, 0x13	; 19
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <dio_dioLevelReadChannel+0x3e>
 3aa:	95 95       	asr	r25
 3ac:	87 95       	ror	r24
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <dio_dioLevelReadChannel+0x3a>
 3b2:	81 70       	andi	r24, 0x01	; 1
		break;
 3b4:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 3b6:	80 b3       	in	r24, 0x10	; 16
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <dio_dioLevelReadChannel+0x50>
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <dio_dioLevelReadChannel+0x4c>
 3c4:	81 70       	andi	r24, 0x01	; 1
		break;
 3c6:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 3ca:	08 95       	ret

000003cc <led_init>:
* \Parameters (in) : None                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_init(void)
{
	dio_vidConfigChannel(LED_RED_PORT,LED_RED_CHANNEL,OUTPUT);
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	67 e0       	ldi	r22, 0x07	; 7
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 aa 00 	call	0x154	; 0x154 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,OUTPUT);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	64 e0       	ldi	r22, 0x04	; 4
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 aa 00 	call	0x154	; 0x154 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,OUTPUT);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	65 e0       	ldi	r22, 0x05	; 5
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 aa 00 	call	0x154	; 0x154 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,OUTPUT);
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	66 e0       	ldi	r22, 0x06	; 6
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 aa 00 	call	0x154	; 0x154 <dio_vidConfigChannel>

	dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_LOW);
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	67 e0       	ldi	r22, 0x07	; 7
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
	dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_LOW);
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	64 e0       	ldi	r22, 0x04	; 4
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
	dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_LOW);
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	65 e0       	ldi	r22, 0x05	; 5
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
	dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	66 e0       	ldi	r22, 0x06	; 6
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
 41c:	08 95       	ret

0000041e <led_on>:
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_on(led_id_t ledId)
{
	switch(ledId)
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	61 f0       	breq	.+24     	; 0x43a <led_on+0x1c>
 422:	28 f0       	brcs	.+10     	; 0x42e <led_on+0x10>
 424:	82 30       	cpi	r24, 0x02	; 2
 426:	79 f0       	breq	.+30     	; 0x446 <led_on+0x28>
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	99 f0       	breq	.+38     	; 0x452 <led_on+0x34>
 42c:	08 95       	ret
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_HIGH);
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	67 e0       	ldi	r22, 0x07	; 7
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_LOW);
		#endif		
		break;
 438:	08 95       	ret
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_HIGH);
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	64 e0       	ldi	r22, 0x04	; 4
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_LOW);
		#endif
		break;
 444:	08 95       	ret
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_HIGH);
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	65 e0       	ldi	r22, 0x05	; 5
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_LOW);
		#endif
		break;
 450:	08 95       	ret
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_HIGH);
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	66 e0       	ldi	r22, 0x06	; 6
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
 45c:	08 95       	ret

0000045e <led_off>:
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_off(led_id_t ledId)
{
	switch(ledId)
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	61 f0       	breq	.+24     	; 0x47a <led_off+0x1c>
 462:	28 f0       	brcs	.+10     	; 0x46e <led_off+0x10>
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	79 f0       	breq	.+30     	; 0x486 <led_off+0x28>
 468:	83 30       	cpi	r24, 0x03	; 3
 46a:	99 f0       	breq	.+38     	; 0x492 <led_off+0x34>
 46c:	08 95       	ret
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_LOW);
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	67 e0       	ldi	r22, 0x07	; 7
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_HIGH);
		#endif		
		break;
 478:	08 95       	ret
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_LOW);
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	64 e0       	ldi	r22, 0x04	; 4
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_HIGH);
		#endif
		break;
 484:	08 95       	ret
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_LOW);
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	65 e0       	ldi	r22, 0x05	; 5
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_HIGH);
		#endif
		break;
 490:	08 95       	ret
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	66 e0       	ldi	r22, 0x06	; 6
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 17 01 	call	0x22e	; 0x22e <dio_vidWriteChannel>
 49c:	08 95       	ret

0000049e <led_toggle>:
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_toggle(led_id_t ledId)
{
	switch(ledId)
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	59 f0       	breq	.+22     	; 0x4b8 <led_toggle+0x1a>
 4a2:	28 f0       	brcs	.+10     	; 0x4ae <led_toggle+0x10>
 4a4:	82 30       	cpi	r24, 0x02	; 2
 4a6:	69 f0       	breq	.+26     	; 0x4c2 <led_toggle+0x24>
 4a8:	83 30       	cpi	r24, 0x03	; 3
 4aa:	81 f0       	breq	.+32     	; 0x4cc <led_toggle+0x2e>
 4ac:	08 95       	ret
	{
		case LED_RED:
		
			dio_vidFlipChannel(LED_RED_PORT,LED_RED_CHANNEL);	
 4ae:	67 e0       	ldi	r22, 0x07	; 7
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 84 01 	call	0x308	; 0x308 <dio_vidFlipChannel>
		break;
 4b6:	08 95       	ret
		
		case LED_GREEN:
			dio_vidFlipChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL);
 4b8:	64 e0       	ldi	r22, 0x04	; 4
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 84 01 	call	0x308	; 0x308 <dio_vidFlipChannel>
		break;
 4c0:	08 95       	ret
		
		case LED_BLUE:
			dio_vidFlipChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL);
 4c2:	65 e0       	ldi	r22, 0x05	; 5
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 84 01 	call	0x308	; 0x308 <dio_vidFlipChannel>

		break;
 4ca:	08 95       	ret
		
		case LED_YELLOW:
			dio_vidFlipChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL);
 4cc:	66 e0       	ldi	r22, 0x06	; 6
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 84 01 	call	0x308	; 0x308 <dio_vidFlipChannel>
 4d4:	08 95       	ret

000004d6 <main>:
#include "led.h"
#include "buzzer.h"

int main(void)
{
    led_init();
 4d6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <led_init>
	button_vidInit();
 4da:	0e 94 36 00 	call	0x6c	; 0x6c <button_vidInit>
	buzzer_init();
 4de:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_init>

    while (1) 
    {
		button_id_t b0 = BUTTON0 ;
		if(Button_GetStatus(b0) == PRESSED)
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 4b 00 	call	0x96	; 0x96 <Button_GetStatus>
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <main+0x1c>
			led_toggle(LED_YELLOW);
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	0e 94 4f 02 	call	0x49e	; 0x49e <led_toggle>
		button_id_t b3 = BUTTON3 ;
		if(Button_GetStatus(b3) == PRESSED)
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	0e 94 4b 00 	call	0x96	; 0x96 <Button_GetStatus>
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	31 f4       	brne	.+12     	; 0x508 <main+0x32>
		{
			led_on(LED_RED);
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	0e 94 0f 02 	call	0x41e	; 0x41e <led_on>
			buzzer_on();
 502:	0e 94 7d 00 	call	0xfa	; 0xfa <buzzer_on>
 506:	ed cf       	rjmp	.-38     	; 0x4e2 <main+0xc>
		}
		else
		{
			led_off(LED_RED);
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 2f 02 	call	0x45e	; 0x45e <led_off>
			buzzer_off();
 50e:	0e 94 83 00 	call	0x106	; 0x106 <buzzer_off>
 512:	e7 cf       	rjmp	.-50     	; 0x4e2 <main+0xc>

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
