
I2C_Trans.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bea  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000704  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c2  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e9  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000927  00000000  00000000  00002751  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a0 01 	call	0x340	; 0x340 <main>
  64:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
DIO_voidSetPinDirection(PORTA,PIN0,OUTPUT); (DDRA,0) = 1;
*/
void		DIO_voidSetPinDirection(u8 PortID ,u8 PinID ,u8 Direction )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_voidSetPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_voidSetPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_voidSetPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_voidSetPinDirection+0xea>
	{
		if(Direction == OUTPUT)
  78:	41 30       	cpi	r20, 0x01	; 1
  7a:	a1 f5       	brne	.+104    	; 0xe4 <DIO_voidSetPinDirection+0x78>
		{
			switch(PortID)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	89 f0       	breq	.+34     	; 0xa2 <DIO_voidSetPinDirection+0x36>
  80:	28 f0       	brcs	.+10     	; 0x8c <DIO_voidSetPinDirection+0x20>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	c9 f0       	breq	.+50     	; 0xb8 <DIO_voidSetPinDirection+0x4c>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	11 f1       	breq	.+68     	; 0xce <DIO_voidSetPinDirection+0x62>
  8a:	08 95       	ret
			{
				case PORTA :	SET_BIT(DDRA_REG,PinID);	break;
  8c:	2a b3       	in	r18, 0x1a	; 26
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_voidSetPinDirection+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_voidSetPinDirection+0x28>
  9c:	82 2b       	or	r24, r18
  9e:	8a bb       	out	0x1a, r24	; 26
  a0:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,PinID);	break;
  a2:	27 b3       	in	r18, 0x17	; 23
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_voidSetPinDirection+0x42>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_voidSetPinDirection+0x3e>
  b2:	82 2b       	or	r24, r18
  b4:	87 bb       	out	0x17, r24	; 23
  b6:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,PinID);	break;
  b8:	24 b3       	in	r18, 0x14	; 20
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_voidSetPinDirection+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_voidSetPinDirection+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,PinID);	break;
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x6a>
  de:	82 2b       	or	r24, r18
  e0:	81 bb       	out	0x11, r24	; 17
  e2:	08 95       	ret
			}
		}else if(Direction == INPUT)
  e4:	41 11       	cpse	r20, r1
  e6:	37 c0       	rjmp	.+110    	; 0x156 <DIO_voidSetPinDirection+0xea>
		{
			switch(PortID)
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	91 f0       	breq	.+36     	; 0x110 <DIO_voidSetPinDirection+0xa4>
  ec:	28 f0       	brcs	.+10     	; 0xf8 <DIO_voidSetPinDirection+0x8c>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	d9 f0       	breq	.+54     	; 0x128 <DIO_voidSetPinDirection+0xbc>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	29 f1       	breq	.+74     	; 0x140 <DIO_voidSetPinDirection+0xd4>
  f6:	08 95       	ret
			{
				case PORTA :	CLR_BIT(DDRA_REG,PinID);	break;
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinDirection+0x94>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	8a bb       	out	0x1a, r24	; 26
 10e:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,PinID);	break;
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0xb0>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0xac>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,PinID);	break;
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinDirection+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinDirection+0xc4>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,PinID);	break;
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_voidSetPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_voidSetPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_voidSetPinValue>:
DIO_voidSetPinValue(PORTA,PIN0,HIGH); (PORTA,0) = 1;
*/
void		DIO_voidSetPinValue(u8 PortID ,u8 PinID ,u8 Value )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_voidSetPinValue+0x6>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_voidSetPinValue+0xea>
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_voidSetPinValue+0xc>
 162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_voidSetPinValue+0xea>
	{
		if(Value == HIGH)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	a1 f5       	brne	.+104    	; 0x1d0 <DIO_voidSetPinValue+0x78>
		{
			switch(PortID)
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	89 f0       	breq	.+34     	; 0x18e <DIO_voidSetPinValue+0x36>
 16c:	28 f0       	brcs	.+10     	; 0x178 <DIO_voidSetPinValue+0x20>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	c9 f0       	breq	.+50     	; 0x1a4 <DIO_voidSetPinValue+0x4c>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	11 f1       	breq	.+68     	; 0x1ba <DIO_voidSetPinValue+0x62>
 176:	08 95       	ret
			{
				case PORTA :	SET_BIT(PORTA_REG,PinID);	break;
 178:	2b b3       	in	r18, 0x1b	; 27
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_voidSetPinValue+0x2c>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_voidSetPinValue+0x28>
 188:	82 2b       	or	r24, r18
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,PinID);	break;
 18e:	28 b3       	in	r18, 0x18	; 24
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_voidSetPinValue+0x42>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_voidSetPinValue+0x3e>
 19e:	82 2b       	or	r24, r18
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,PinID);	break;
 1a4:	25 b3       	in	r18, 0x15	; 21
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_voidSetPinValue+0x58>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_voidSetPinValue+0x54>
 1b4:	82 2b       	or	r24, r18
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,PinID);	break;
 1ba:	22 b3       	in	r18, 0x12	; 18
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_voidSetPinValue+0x6e>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_voidSetPinValue+0x6a>
 1ca:	82 2b       	or	r24, r18
 1cc:	82 bb       	out	0x12, r24	; 18
 1ce:	08 95       	ret
			}
		}else if(Value == LOW)
 1d0:	41 11       	cpse	r20, r1
 1d2:	37 c0       	rjmp	.+110    	; 0x242 <DIO_voidSetPinValue+0xea>
		{
			switch(PortID)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	91 f0       	breq	.+36     	; 0x1fc <DIO_voidSetPinValue+0xa4>
 1d8:	28 f0       	brcs	.+10     	; 0x1e4 <DIO_voidSetPinValue+0x8c>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	d9 f0       	breq	.+54     	; 0x214 <DIO_voidSetPinValue+0xbc>
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	29 f1       	breq	.+74     	; 0x22c <DIO_voidSetPinValue+0xd4>
 1e2:	08 95       	ret
			{
				case PORTA :	CLR_BIT(PORTA_REG,PinID);	break;
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinValue+0x98>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinValue+0x94>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	8b bb       	out	0x1b, r24	; 27
 1fa:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,PinID);	break;
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0xb0>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0xac>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,PinID);	break;
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0xc8>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0xc4>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 22a:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,PinID);	break;
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinValue+0xe0>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinValue+0xdc>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <DIO_u8GetPinValue>:

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	70 f5       	brcc	.+92     	; 0x2a4 <DIO_u8GetPinValue+0x60>
 248:	68 30       	cpi	r22, 0x08	; 8
 24a:	70 f5       	brcc	.+92     	; 0x2a8 <DIO_u8GetPinValue+0x64>
	{
		switch(PortID)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	79 f0       	breq	.+30     	; 0x26e <DIO_u8GetPinValue+0x2a>
 250:	28 f0       	brcs	.+10     	; 0x25c <DIO_u8GetPinValue+0x18>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	a9 f0       	breq	.+42     	; 0x280 <DIO_u8GetPinValue+0x3c>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	e1 f0       	breq	.+56     	; 0x292 <DIO_u8GetPinValue+0x4e>
 25a:	28 c0       	rjmp	.+80     	; 0x2ac <DIO_u8GetPinValue+0x68>
		{
			case PORTA :	Local_u8Value	=	GET_BIT(PINA_REG,PinID);	break;
 25c:	89 b3       	in	r24, 0x19	; 25
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_u8GetPinValue+0x22>
 262:	95 95       	asr	r25
 264:	87 95       	ror	r24
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_u8GetPinValue+0x1e>
 26a:	81 70       	andi	r24, 0x01	; 1
 26c:	08 95       	ret
			case PORTB :	Local_u8Value	=	GET_BIT(PINB_REG,PinID);	break;
 26e:	86 b3       	in	r24, 0x16	; 22
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_u8GetPinValue+0x34>
 274:	95 95       	asr	r25
 276:	87 95       	ror	r24
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_u8GetPinValue+0x30>
 27c:	81 70       	andi	r24, 0x01	; 1
 27e:	08 95       	ret
			case PORTC :	Local_u8Value	=	GET_BIT(PINC_REG,PinID);	break;
 280:	83 b3       	in	r24, 0x13	; 19
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_u8GetPinValue+0x46>
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_u8GetPinValue+0x42>
 28e:	81 70       	andi	r24, 0x01	; 1
 290:	08 95       	ret
			case PORTD :	Local_u8Value	=	GET_BIT(PIND_REG,PinID);	break;
 292:	80 b3       	in	r24, 0x10	; 16
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_u8GetPinValue+0x58>
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_u8GetPinValue+0x54>
 2a0:	81 70       	andi	r24, 0x01	; 1
 2a2:	08 95       	ret
u8 x = DIO_voidGetPinValue(PORTA,PIN0); GET(PINA,0)
*/

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	08 95       	ret
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	08 95       	ret
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		/*	Return Error 								*/
	}
	return Local_u8Value ;
}
 2ae:	08 95       	ret

000002b0 <I2C_Master_voidInit>:
	if ((TWSR_REG & 0xF8)!=I2C_MT_SLA_R_ACK)
	{
		Local_enuError= I2C_MT_SLA_R_ERROR;
	}
	return Local_enuError;
}
 2b0:	88 e4       	ldi	r24, 0x48	; 72
 2b2:	80 b9       	out	0x00, r24	; 0
 2b4:	81 b1       	in	r24, 0x01	; 1
 2b6:	8e 7f       	andi	r24, 0xFE	; 254
 2b8:	81 b9       	out	0x01, r24	; 1
 2ba:	81 b1       	in	r24, 0x01	; 1
 2bc:	8d 7f       	andi	r24, 0xFD	; 253
 2be:	81 b9       	out	0x01, r24	; 1
 2c0:	86 b7       	in	r24, 0x36	; 54
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	86 bf       	out	0x36, r24	; 54
 2c6:	82 b1       	in	r24, 0x02	; 2
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	82 b9       	out	0x02, r24	; 2
 2cc:	86 b7       	in	r24, 0x36	; 54
 2ce:	84 60       	ori	r24, 0x04	; 4
 2d0:	86 bf       	out	0x36, r24	; 54
 2d2:	08 95       	ret

000002d4 <I2C_Master_enuSendStartCond>:
 2d4:	86 b7       	in	r24, 0x36	; 54
 2d6:	80 62       	ori	r24, 0x20	; 32
 2d8:	86 bf       	out	0x36, r24	; 54
 2da:	86 b7       	in	r24, 0x36	; 54
 2dc:	80 68       	ori	r24, 0x80	; 128
 2de:	86 bf       	out	0x36, r24	; 54
 2e0:	06 b6       	in	r0, 0x36	; 54
 2e2:	07 fe       	sbrs	r0, 7
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <I2C_Master_enuSendStartCond+0xc>
 2e6:	81 b1       	in	r24, 0x01	; 1
 2e8:	88 7f       	andi	r24, 0xF8	; 248
 2ea:	88 30       	cpi	r24, 0x08	; 8
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <I2C_Master_enuSendStartCond+0x1e>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	08 95       	ret

000002f6 <I2C_Master_enuSendSlaveAddressWithWrite>:

I2C_Error_State   I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address)
{
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Put Address to TWDR_REG  */
	TWDR_REG=(I2C_Address<<1);
 2f6:	88 0f       	add	r24, r24
 2f8:	83 b9       	out	0x03, r24	; 3
	/*		Write Operation  */
	CLR_BIT(TWDR_REG,0);
 2fa:	83 b1       	in	r24, 0x03	; 3
 2fc:	8e 7f       	andi	r24, 0xFE	; 254
 2fe:	83 b9       	out	0x03, r24	; 3
	/*		CLR the start condition  */
	CLR_BIT(TWCR_REG,TWSTA);
 300:	86 b7       	in	r24, 0x36	; 54
 302:	8f 7d       	andi	r24, 0xDF	; 223
 304:	86 bf       	out	0x36, r24	; 54
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 306:	86 b7       	in	r24, 0x36	; 54
 308:	80 68       	ori	r24, 0x80	; 128
 30a:	86 bf       	out	0x36, r24	; 54
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
 30c:	06 b6       	in	r0, 0x36	; 54
 30e:	07 fe       	sbrs	r0, 7
 310:	fd cf       	rjmp	.-6      	; 0x30c <I2C_Master_enuSendSlaveAddressWithWrite+0x16>
	if ((TWSR_REG & 0xF8)!=I2C_MT_SLA_W_ACK)
 312:	81 b1       	in	r24, 0x01	; 1
 314:	88 7f       	andi	r24, 0xF8	; 248
 316:	88 31       	cpi	r24, 0x18	; 24
 318:	11 f4       	brne	.+4      	; 0x31e <I2C_Master_enuSendSlaveAddressWithWrite+0x28>
	return Local_enuError;
}

I2C_Error_State   I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address)
{
	I2C_Error_State Local_enuError= I2C_OK;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
	SET_BIT(TWCR_REG,TWINT);
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
	if ((TWSR_REG & 0xF8)!=I2C_MT_SLA_W_ACK)
	{
		Local_enuError= I2C_MT_SLA_W_ERROR;
 31e:	84 e0       	ldi	r24, 0x04	; 4
	}
	return Local_enuError;
}
 320:	08 95       	ret

00000322 <I2C_Master_enuSendu8Data>:

I2C_Error_State   I2C_Master_enuSendu8Data(u8 I2C_Data)
{
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Put Data to TWDR_REG  */
	TWDR_REG=I2C_Data;
 322:	83 b9       	out	0x03, r24	; 3
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 324:	86 b7       	in	r24, 0x36	; 54
 326:	80 68       	ori	r24, 0x80	; 128
 328:	86 bf       	out	0x36, r24	; 54
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
 32a:	06 b6       	in	r0, 0x36	; 54
 32c:	07 fe       	sbrs	r0, 7
 32e:	fd cf       	rjmp	.-6      	; 0x32a <I2C_Master_enuSendu8Data+0x8>
	if ((TWSR_REG & 0xF8)!=I2C_MT_DATA_ACK)
 330:	81 b1       	in	r24, 0x01	; 1
 332:	88 7f       	andi	r24, 0xF8	; 248
 334:	88 32       	cpi	r24, 0x28	; 40
 336:	11 f4       	brne	.+4      	; 0x33c <I2C_Master_enuSendu8Data+0x1a>
	return Local_enuError;
}

I2C_Error_State   I2C_Master_enuSendu8Data(u8 I2C_Data)
{
	I2C_Error_State Local_enuError= I2C_OK;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
	SET_BIT(TWCR_REG,TWINT);
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
	if ((TWSR_REG & 0xF8)!=I2C_MT_DATA_ACK)
	{
		Local_enuError= I2C_MT_DATA_ERROR;
 33c:	85 e0       	ldi	r24, 0x05	; 5
	}
	return Local_enuError;
}
 33e:	08 95       	ret

00000340 <main>:
#include "DIO_interface.h"
#include "I2C_interface.h"

int main(void)
{
	DIO_voidSetPinDirection(PORTA,PIN0,INPUT);
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA,PIN0,HIGH);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTA,PIN1,INPUT);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA,PIN1,HIGH);
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_voidSetPinValue>
	
	I2C_Master_voidInit();
 368:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Master_voidInit>
	I2C_Error_State Error=I2C_OK;
	while (1)
	{
		Error =I2C_Master_enuSendStartCond();
 36c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <I2C_Master_enuSendStartCond>
		Error=I2C_Master_enuSendSlaveAddressWithWrite(0x10);
 370:	80 e1       	ldi	r24, 0x10	; 16
 372:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <I2C_Master_enuSendSlaveAddressWithWrite>
 376:	c8 2f       	mov	r28, r24
		if(Error==I2C_OK && DIO_u8GetPinValue(PORTA,PIN0)==0)
 378:	81 11       	cpse	r24, r1
 37a:	0a c0       	rjmp	.+20     	; 0x390 <main+0x50>
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 22 01 	call	0x244	; 0x244 <DIO_u8GetPinValue>
 384:	81 11       	cpse	r24, r1
 386:	04 c0       	rjmp	.+8      	; 0x390 <main+0x50>
		{
			Error=I2C_Master_enuSendu8Data('H');
 388:	88 e4       	ldi	r24, 0x48	; 72
 38a:	0e 94 91 01 	call	0x322	; 0x322 <I2C_Master_enuSendu8Data>
 38e:	ee cf       	rjmp	.-36     	; 0x36c <main+0x2c>
		}
		else if(Error==I2C_OK && DIO_u8GetPinValue(PORTA,PIN1)==0)
 390:	c1 11       	cpse	r28, r1
 392:	ec cf       	rjmp	.-40     	; 0x36c <main+0x2c>
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 22 01 	call	0x244	; 0x244 <DIO_u8GetPinValue>
 39c:	81 11       	cpse	r24, r1
 39e:	e6 cf       	rjmp	.-52     	; 0x36c <main+0x2c>
		{
			Error=I2C_Master_enuSendu8Data('L');
 3a0:	8c e4       	ldi	r24, 0x4C	; 76
 3a2:	0e 94 91 01 	call	0x322	; 0x322 <I2C_Master_enuSendu8Data>
 3a6:	e2 cf       	rjmp	.-60     	; 0x36c <main+0x2c>

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
