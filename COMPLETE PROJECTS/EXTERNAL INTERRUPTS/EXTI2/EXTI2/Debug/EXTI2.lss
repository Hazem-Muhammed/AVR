
EXTI2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000412  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000486  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ee  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bf  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084b  00000000  00000000  000023f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068d  00000000  00000000  00002e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000607  00000000  00000000  00003509  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <main>
  74:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <button_vidInit>:
* \Parameters (in) : None                                                                            
* \Return value:   : None                                
*******************************************************************************/
void button_vidInit(void)
{
	dio_vidConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	67 e0       	ldi	r22, 0x07	; 7
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	0e 94 53 00 	call	0xa6	; 0xa6 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	66 e0       	ldi	r22, 0x06	; 6
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	0e 94 53 00 	call	0xa6	; 0xa6 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	65 e0       	ldi	r22, 0x05	; 5
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	0e 94 53 00 	call	0xa6	; 0xa6 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON3_PORT,BUTTON3_PIN,INPUT);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	63 e0       	ldi	r22, 0x03	; 3
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	0e 94 53 00 	call	0xa6	; 0xa6 <dio_vidConfigChannel>
  a4:	08 95       	ret

000000a6 <dio_vidConfigChannel>:
					 value -> data value
					 mask  -> data mask
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask)
{
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	01 f1       	breq	.+64     	; 0xea <dio_vidConfigChannel+0x44>
  aa:	30 f0       	brcs	.+12     	; 0xb8 <dio_vidConfigChannel+0x12>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	b1 f1       	breq	.+108    	; 0x11c <dio_vidConfigChannel+0x76>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	09 f4       	brne	.+2      	; 0xb6 <dio_vidConfigChannel+0x10>
  b4:	4c c0       	rjmp	.+152    	; 0x14e <dio_vidConfigChannel+0xa8>
  b6:	08 95       	ret
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	59 f4       	brne	.+22     	; 0xd2 <dio_vidConfigChannel+0x2c>
  bc:	2a b3       	in	r18, 0x1a	; 26
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <dio_vidConfigChannel+0x22>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <dio_vidConfigChannel+0x1e>
  cc:	82 2b       	or	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <dio_vidConfigChannel+0x38>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <dio_vidConfigChannel+0x34>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	08 95       	ret
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <dio_vidConfigChannel+0x5e>
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <dio_vidConfigChannel+0x54>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <dio_vidConfigChannel+0x50>
  fe:	82 2b       	or	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <dio_vidConfigChannel+0x6a>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <dio_vidConfigChannel+0x66>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	59 f4       	brne	.+22     	; 0x136 <dio_vidConfigChannel+0x90>
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <dio_vidConfigChannel+0x86>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <dio_vidConfigChannel+0x82>
 130:	82 2b       	or	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <dio_vidConfigChannel+0x9c>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <dio_vidConfigChannel+0x98>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	84 bb       	out	0x14, r24	; 20
 14c:	08 95       	ret
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	59 f4       	brne	.+22     	; 0x168 <dio_vidConfigChannel+0xc2>
 152:	21 b3       	in	r18, 0x11	; 17
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <dio_vidConfigChannel+0xb8>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <dio_vidConfigChannel+0xb4>
 162:	82 2b       	or	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret
 168:	21 b3       	in	r18, 0x11	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <dio_vidConfigChannel+0xce>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <dio_vidConfigChannel+0xca>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	08 95       	ret

00000180 <dio_vidWriteChannel>:
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <dio_vidWriteChannel+0x44>
 184:	30 f0       	brcs	.+12     	; 0x192 <dio_vidWriteChannel+0x12>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <dio_vidWriteChannel+0x76>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <dio_vidWriteChannel+0x10>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <dio_vidWriteChannel+0xa8>
 190:	08 95       	ret
 192:	41 11       	cpse	r20, r1
 194:	0c c0       	rjmp	.+24     	; 0x1ae <dio_vidWriteChannel+0x2e>
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <dio_vidWriteChannel+0x22>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <dio_vidWriteChannel+0x1e>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
 1ae:	2b b3       	in	r18, 0x1b	; 27
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <dio_vidWriteChannel+0x3a>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <dio_vidWriteChannel+0x36>
 1be:	82 2b       	or	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
 1c4:	41 11       	cpse	r20, r1
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <dio_vidWriteChannel+0x60>
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <dio_vidWriteChannel+0x54>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <dio_vidWriteChannel+0x50>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret
 1e0:	28 b3       	in	r18, 0x18	; 24
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <dio_vidWriteChannel+0x6c>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <dio_vidWriteChannel+0x68>
 1f0:	82 2b       	or	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
 1f6:	41 11       	cpse	r20, r1
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <dio_vidWriteChannel+0x92>
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <dio_vidWriteChannel+0x86>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <dio_vidWriteChannel+0x82>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
 212:	25 b3       	in	r18, 0x15	; 21
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <dio_vidWriteChannel+0x9e>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <dio_vidWriteChannel+0x9a>
 222:	82 2b       	or	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
 228:	41 11       	cpse	r20, r1
 22a:	0c c0       	rjmp	.+24     	; 0x244 <dio_vidWriteChannel+0xc4>
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <dio_vidWriteChannel+0xb8>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <dio_vidWriteChannel+0xb4>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret
 244:	22 b3       	in	r18, 0x12	; 18
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <dio_vidWriteChannel+0xd0>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <dio_vidWriteChannel+0xcc>
 254:	82 2b       	or	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	89 f0       	breq	.+34     	; 0x280 <dio_vidFlipChannel+0x26>
 25e:	28 f0       	brcs	.+10     	; 0x26a <dio_vidFlipChannel+0x10>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	c9 f0       	breq	.+50     	; 0x296 <dio_vidFlipChannel+0x3c>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	11 f1       	breq	.+68     	; 0x2ac <dio_vidFlipChannel+0x52>
 268:	08 95       	ret
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 26a:	2b b3       	in	r18, 0x1b	; 27
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <dio_vidFlipChannel+0x1c>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <dio_vidFlipChannel+0x18>
 27a:	82 27       	eor	r24, r18
 27c:	8b bb       	out	0x1b, r24	; 27
		break;
 27e:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 280:	28 b3       	in	r18, 0x18	; 24
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <dio_vidFlipChannel+0x32>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <dio_vidFlipChannel+0x2e>
 290:	82 27       	eor	r24, r18
 292:	88 bb       	out	0x18, r24	; 24
		break;
 294:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 296:	25 b3       	in	r18, 0x15	; 21
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <dio_vidFlipChannel+0x48>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <dio_vidFlipChannel+0x44>
 2a6:	82 27       	eor	r24, r18
 2a8:	85 bb       	out	0x15, r24	; 21
		break;
 2aa:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 2ac:	22 b3       	in	r18, 0x12	; 18
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <dio_vidFlipChannel+0x5e>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <dio_vidFlipChannel+0x5a>
 2bc:	82 27       	eor	r24, r18
 2be:	82 bb       	out	0x12, r24	; 18
 2c0:	08 95       	ret

000002c2 <EXTI2_vconfig>:
}


void EXTI2_vconfig()
{
	dio_vidConfigChannel(DIO_PORTB,DIO_PIN2,INPUT);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 53 00 	call	0xa6	; 0xa6 <dio_vidConfigChannel>
	
	#if (EXTI1_SENSE_MODE == FALLING)
		CLEAR_BIT(MCUCR,ISC10_BIT);
 2cc:	85 b7       	in	r24, 0x35	; 53
 2ce:	8b 7f       	andi	r24, 0xFB	; 251
 2d0:	85 bf       	out	0x35, r24	; 53
 2d2:	08 95       	ret

000002d4 <EXT2_voidInit>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT2_voidSetSignalch(u8 SenseCpy)
{
 2d4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EXTI2_vconfig>
 2d8:	8b b7       	in	r24, 0x3b	; 59
 2da:	8f 7d       	andi	r24, 0xDF	; 223
 2dc:	8b bf       	out	0x3b, r24	; 59
 2de:	8a b7       	in	r24, 0x3a	; 58
 2e0:	80 62       	ori	r24, 0x20	; 32
 2e2:	8a bf       	out	0x3a, r24	; 58
 2e4:	8f b7       	in	r24, 0x3f	; 63
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	8f bf       	out	0x3f, r24	; 63
 2ea:	08 95       	ret

000002ec <EXT2_voidEnable>:
 2ec:	8b b7       	in	r24, 0x3b	; 59
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	8b bf       	out	0x3b, r24	; 59
 2f2:	08 95       	ret

000002f4 <EXT2_voidCallBack>:
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	21 f0       	breq	.+8      	; 0x300 <EXT2_voidCallBack+0xc>
 2f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 300:	08 95       	ret

00000302 <__vector_3>:
/** Linker Problem solved */
void __vector_3(void) __attribute__(( signal , used ));


void __vector_3(void)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	2f 93       	push	r18
 30e:	3f 93       	push	r19
 310:	4f 93       	push	r20
 312:	5f 93       	push	r21
 314:	6f 93       	push	r22
 316:	7f 93       	push	r23
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
 31c:	af 93       	push	r26
 31e:	bf 93       	push	r27
 320:	ef 93       	push	r30
 322:	ff 93       	push	r31
	x();
 324:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 328:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 32c:	09 95       	icall
	
}
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	bf 91       	pop	r27
 334:	af 91       	pop	r26
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	7f 91       	pop	r23
 33c:	6f 91       	pop	r22
 33e:	5f 91       	pop	r21
 340:	4f 91       	pop	r20
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <led_init>:
		#endif
		break;
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	67 e0       	ldi	r22, 0x07	; 7
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 53 00 	call	0xa6	; 0xa6 <dio_vidConfigChannel>
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	64 e0       	ldi	r22, 0x04	; 4
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0e 94 53 00 	call	0xa6	; 0xa6 <dio_vidConfigChannel>
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	65 e0       	ldi	r22, 0x05	; 5
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 53 00 	call	0xa6	; 0xa6 <dio_vidConfigChannel>
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	66 e0       	ldi	r22, 0x06	; 6
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 53 00 	call	0xa6	; 0xa6 <dio_vidConfigChannel>
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	67 e0       	ldi	r22, 0x07	; 7
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 c0 00 	call	0x180	; 0x180 <dio_vidWriteChannel>
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	64 e0       	ldi	r22, 0x04	; 4
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 c0 00 	call	0x180	; 0x180 <dio_vidWriteChannel>
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	65 e0       	ldi	r22, 0x05	; 5
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 c0 00 	call	0x180	; 0x180 <dio_vidWriteChannel>
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	66 e0       	ldi	r22, 0x06	; 6
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 c0 00 	call	0x180	; 0x180 <dio_vidWriteChannel>
 3a0:	08 95       	ret

000003a2 <led_toggle>:
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_toggle(led_id_t ledId)
{
	switch(ledId)
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	59 f0       	breq	.+22     	; 0x3bc <led_toggle+0x1a>
 3a6:	28 f0       	brcs	.+10     	; 0x3b2 <led_toggle+0x10>
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	69 f0       	breq	.+26     	; 0x3c6 <led_toggle+0x24>
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	81 f0       	breq	.+32     	; 0x3d0 <led_toggle+0x2e>
 3b0:	08 95       	ret
	{
		case LED_RED:
		
			dio_vidFlipChannel(LED_RED_PORT,LED_RED_CHANNEL);	
 3b2:	67 e0       	ldi	r22, 0x07	; 7
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 2d 01 	call	0x25a	; 0x25a <dio_vidFlipChannel>
		break;
 3ba:	08 95       	ret
		
		case LED_GREEN:
			dio_vidFlipChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL);
 3bc:	64 e0       	ldi	r22, 0x04	; 4
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 2d 01 	call	0x25a	; 0x25a <dio_vidFlipChannel>
		break;
 3c4:	08 95       	ret
		
		case LED_BLUE:
			dio_vidFlipChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL);
 3c6:	65 e0       	ldi	r22, 0x05	; 5
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 2d 01 	call	0x25a	; 0x25a <dio_vidFlipChannel>

		break;
 3ce:	08 95       	ret
		
		case LED_YELLOW:
			dio_vidFlipChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL);
 3d0:	66 e0       	ldi	r22, 0x06	; 6
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 2d 01 	call	0x25a	; 0x25a <dio_vidFlipChannel>
 3d8:	08 95       	ret

000003da <ISR>:
	}
}

void ISR ()
{
	led_toggle(LED_GREEN);
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	84 e3       	ldi	r24, 0x34	; 52
 3e4:	9c e0       	ldi	r25, 0x0C	; 12
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <ISR+0xc>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <ISR+0x16>
 3f0:	00 00       	nop
 3f2:	08 95       	ret

000003f4 <main>:

void ISR (void);

int main(void)
{
	EXT2_voidCallBack(ISR);
 3f4:	8d ee       	ldi	r24, 0xED	; 237
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <EXT2_voidCallBack>
	led_init();
 3fc:	0e 94 a8 01 	call	0x350	; 0x350 <led_init>
	button_vidInit();
 400:	0e 94 3e 00 	call	0x7c	; 0x7c <button_vidInit>
	EXT2_voidInit();
 404:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <EXT2_voidInit>
	EXT2_voidEnable();
 408:	0e 94 76 01 	call	0x2ec	; 0x2ec <EXT2_voidEnable>
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
