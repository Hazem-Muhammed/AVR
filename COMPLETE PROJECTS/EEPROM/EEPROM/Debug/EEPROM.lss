
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000050c  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000153c  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000940  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e4  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00002e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000612  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a28  00000000  00000000  000035ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003ff6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
  7a:	0c 94 84 02 	jmp	0x508	; 0x508 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	01 f1       	breq	.+64     	; 0xc6 <dio_vidConfigChannel+0x44>
  86:	30 f0       	brcs	.+12     	; 0x94 <dio_vidConfigChannel+0x12>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	b1 f1       	breq	.+108    	; 0xf8 <dio_vidConfigChannel+0x76>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <dio_vidConfigChannel+0x10>
  90:	4c c0       	rjmp	.+152    	; 0x12a <dio_vidConfigChannel+0xa8>
  92:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  94:	41 30       	cpi	r20, 0x01	; 1
  96:	59 f4       	brne	.+22     	; 0xae <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <dio_vidConfigChannel+0x22>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <dio_vidConfigChannel+0x1e>
  a8:	82 2b       	or	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	08 95       	ret
		}
		else
		{
			CLR_BIT (DIO_DDRA_REG,channel);
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <dio_vidConfigChannel+0x38>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <dio_vidConfigChannel+0x34>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	8a bb       	out	0x1a, r24	; 26
  c4:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  c6:	41 30       	cpi	r20, 0x01	; 1
  c8:	59 f4       	brne	.+22     	; 0xe0 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <dio_vidConfigChannel+0x54>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <dio_vidConfigChannel+0x50>
  da:	82 2b       	or	r24, r18
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret
		}
		else
		{
			CLR_BIT (DIO_DDRB_REG,channel);
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <dio_vidConfigChannel+0x6a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <dio_vidConfigChannel+0x66>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  f8:	41 30       	cpi	r20, 0x01	; 1
  fa:	59 f4       	brne	.+22     	; 0x112 <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <dio_vidConfigChannel+0x86>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <dio_vidConfigChannel+0x82>
 10c:	82 2b       	or	r24, r18
 10e:	84 bb       	out	0x14, r24	; 20
 110:	08 95       	ret
		}
		else
		{
			CLR_BIT (DIO_DDRC_REG,channel);
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <dio_vidConfigChannel+0x9c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <dio_vidConfigChannel+0x98>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	84 bb       	out	0x14, r24	; 20
 128:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	59 f4       	brne	.+22     	; 0x144 <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <dio_vidConfigChannel+0xb8>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <dio_vidConfigChannel+0xb4>
 13e:	82 2b       	or	r24, r18
 140:	81 bb       	out	0x11, r24	; 17
 142:	08 95       	ret
		}
		else
		{
			CLR_BIT (DIO_DDRD_REG,channel);
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <dio_vidConfigChannel+0xce>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <dio_vidConfigChannel+0xca>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	81 bb       	out	0x11, r24	; 17
 15a:	08 95       	ret

0000015c <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	01 f1       	breq	.+64     	; 0x1a0 <dio_vidWriteChannel+0x44>
 160:	30 f0       	brcs	.+12     	; 0x16e <dio_vidWriteChannel+0x12>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	b1 f1       	breq	.+108    	; 0x1d2 <dio_vidWriteChannel+0x76>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	09 f4       	brne	.+2      	; 0x16c <dio_vidWriteChannel+0x10>
 16a:	4c c0       	rjmp	.+152    	; 0x204 <dio_vidWriteChannel+0xa8>
 16c:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 16e:	41 11       	cpse	r20, r1
 170:	0c c0       	rjmp	.+24     	; 0x18a <dio_vidWriteChannel+0x2e>
		{
			CLR_BIT(DIO_PORTA_REG,channel);
 172:	2b b3       	in	r18, 0x1b	; 27
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <dio_vidWriteChannel+0x22>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <dio_vidWriteChannel+0x1e>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	8b bb       	out	0x1b, r24	; 27
 188:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 18a:	2b b3       	in	r18, 0x1b	; 27
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <dio_vidWriteChannel+0x3a>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <dio_vidWriteChannel+0x36>
 19a:	82 2b       	or	r24, r18
 19c:	8b bb       	out	0x1b, r24	; 27
 19e:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 1a0:	41 11       	cpse	r20, r1
 1a2:	0c c0       	rjmp	.+24     	; 0x1bc <dio_vidWriteChannel+0x60>
		{
			CLR_BIT(DIO_PORTB_REG,channel);
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <dio_vidWriteChannel+0x54>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <dio_vidWriteChannel+0x50>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 1bc:	28 b3       	in	r18, 0x18	; 24
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <dio_vidWriteChannel+0x6c>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <dio_vidWriteChannel+0x68>
 1cc:	82 2b       	or	r24, r18
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 1d2:	41 11       	cpse	r20, r1
 1d4:	0c c0       	rjmp	.+24     	; 0x1ee <dio_vidWriteChannel+0x92>
		{
			CLR_BIT(DIO_PORTC_REG,channel);
 1d6:	25 b3       	in	r18, 0x15	; 21
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <dio_vidWriteChannel+0x86>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <dio_vidWriteChannel+0x82>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 1ee:	25 b3       	in	r18, 0x15	; 21
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <dio_vidWriteChannel+0x9e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <dio_vidWriteChannel+0x9a>
 1fe:	82 2b       	or	r24, r18
 200:	85 bb       	out	0x15, r24	; 21
 202:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 204:	41 11       	cpse	r20, r1
 206:	0c c0       	rjmp	.+24     	; 0x220 <dio_vidWriteChannel+0xc4>
		{
			CLR_BIT(DIO_PORTD_REG,channel);
 208:	22 b3       	in	r18, 0x12	; 18
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <dio_vidWriteChannel+0xb8>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <dio_vidWriteChannel+0xb4>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	82 bb       	out	0x12, r24	; 18
 21e:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 220:	22 b3       	in	r18, 0x12	; 18
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <dio_vidWriteChannel+0xd0>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <dio_vidWriteChannel+0xcc>
 230:	82 2b       	or	r24, r18
 232:	82 bb       	out	0x12, r24	; 18
 234:	08 95       	ret

00000236 <EEPROM_VRead_Byte>:
#include "EEPROM_Init.h"


u8 EEPROM_VRead_Byte(u16 Adress)
{
	while ( GET_BIT(EECR,EEWE_BIT) ==1  ) ; //WAIT UNTIL WRITE IS COMPLETED
 236:	e1 99       	sbic	0x1c, 1	; 28
 238:	fe cf       	rjmp	.-4      	; 0x236 <EEPROM_VRead_Byte>
	EEARL = Adress ;
 23a:	9f bb       	out	0x1f, r25	; 31
 23c:	8e bb       	out	0x1e, r24	; 30
	SET_BIT(EECR,EERE_BIT);
 23e:	8c b3       	in	r24, 0x1c	; 28
 240:	81 60       	ori	r24, 0x01	; 1
 242:	8c bb       	out	0x1c, r24	; 28
	return EEDR ;
 244:	8d b3       	in	r24, 0x1d	; 29
	
}
 246:	08 95       	ret

00000248 <EEPROM_VWrite_Byte>:

/***************************************************************/

void EEPROM_VWrite_Byte(u8 Data , u16 Adress)
{
	while ( GET_BIT(EECR,EEWE_BIT) ==1  ) ; //WAIT UNTIL WRITE IS COMPLETED
 248:	e1 99       	sbic	0x1c, 1	; 28
 24a:	fe cf       	rjmp	.-4      	; 0x248 <EEPROM_VWrite_Byte>
	while ( GET_BIT(SPMCR,SPMEN_BIT) ==1  ) ; //WAIT UNTIL SPMEN IS ZERO
 24c:	07 b6       	in	r0, 0x37	; 55
 24e:	00 fc       	sbrc	r0, 0
 250:	fd cf       	rjmp	.-6      	; 0x24c <EEPROM_VWrite_Byte+0x4>
	EEARL = Adress ;
 252:	7f bb       	out	0x1f, r23	; 31
 254:	6e bb       	out	0x1e, r22	; 30
	EEDR = Data ;
 256:	8d bb       	out	0x1d, r24	; 29
	SET_BIT(EECR,EEWE_BIT) ;
 258:	8c b3       	in	r24, 0x1c	; 28
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	8c bb       	out	0x1c, r24	; 28
	SET_BIT(EECR,EEMWE_BIT) ;
 25e:	8c b3       	in	r24, 0x1c	; 28
 260:	84 60       	ori	r24, 0x04	; 4
 262:	8c bb       	out	0x1c, r24	; 28
	CLR_BIT(EECR,EERE_BIT) ;	
 264:	8c b3       	in	r24, 0x1c	; 28
 266:	8e 7f       	andi	r24, 0xFE	; 254
 268:	8c bb       	out	0x1c, r24	; 28
 26a:	08 95       	ret

0000026c <lcd_sendCmd>:
	u8 CursorPosition=0x80;
	switch(row){
		case 0:CursorPosition=0x80;CursorPosition+=column;lcd_sendCmd(CursorPosition);break;
		case 1:CursorPosition=0xC0;CursorPosition+=column;lcd_sendCmd(CursorPosition);break;
		case 2:CursorPosition=0x94;CursorPosition+=column;lcd_sendCmd(CursorPosition);break;
		case 3:CursorPosition=0xD4;CursorPosition+=column;lcd_sendCmd(CursorPosition);break;
 26c:	cf 93       	push	r28
 26e:	c8 2f       	mov	r28, r24
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	64 e0       	ldi	r22, 0x04	; 4
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 2a2:	c4 fb       	bst	r28, 4
 2a4:	44 27       	eor	r20, r20
 2a6:	40 f9       	bld	r20, 0
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 2b0:	c5 fb       	bst	r28, 5
 2b2:	44 27       	eor	r20, r20
 2b4:	40 f9       	bld	r20, 0
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 2be:	c6 fb       	bst	r28, 6
 2c0:	44 27       	eor	r20, r20
 2c2:	40 f9       	bld	r20, 0
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 2cc:	4c 2f       	mov	r20, r28
 2ce:	44 1f       	adc	r20, r20
 2d0:	44 27       	eor	r20, r20
 2d2:	44 1f       	adc	r20, r20
 2d4:	64 e0       	ldi	r22, 0x04	; 4
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 2e6:	85 e0       	ldi	r24, 0x05	; 5
 2e8:	8a 95       	dec	r24
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_sendCmd+0x7c>
 2ec:	00 00       	nop
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 2f8:	4c 2f       	mov	r20, r28
 2fa:	41 70       	andi	r20, 0x01	; 1
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 304:	c1 fb       	bst	r28, 1
 306:	44 27       	eor	r20, r20
 308:	40 f9       	bld	r20, 0
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 312:	c2 fb       	bst	r28, 2
 314:	44 27       	eor	r20, r20
 316:	40 f9       	bld	r20, 0
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 320:	c3 fb       	bst	r28, 3
 322:	44 27       	eor	r20, r20
 324:	40 f9       	bld	r20, 0
 326:	64 e0       	ldi	r22, 0x04	; 4
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 338:	95 e0       	ldi	r25, 0x05	; 5
 33a:	9a 95       	dec	r25
 33c:	f1 f7       	brne	.-4      	; 0x33a <lcd_sendCmd+0xce>
 33e:	00 00       	nop
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 34a:	8f e3       	ldi	r24, 0x3F	; 63
 34c:	9f e1       	ldi	r25, 0x1F	; 31
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <lcd_sendCmd+0xe2>
 352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_sendCmd+0xe8>
 354:	00 00       	nop
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <lcd_sendData>:
 35a:	cf 93       	push	r28
 35c:	c8 2f       	mov	r28, r24
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	64 e0       	ldi	r22, 0x04	; 4
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 390:	c4 fb       	bst	r28, 4
 392:	44 27       	eor	r20, r20
 394:	40 f9       	bld	r20, 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 39e:	c5 fb       	bst	r28, 5
 3a0:	44 27       	eor	r20, r20
 3a2:	40 f9       	bld	r20, 0
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 3ac:	c6 fb       	bst	r28, 6
 3ae:	44 27       	eor	r20, r20
 3b0:	40 f9       	bld	r20, 0
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 3ba:	4c 2f       	mov	r20, r28
 3bc:	44 1f       	adc	r20, r20
 3be:	44 27       	eor	r20, r20
 3c0:	44 1f       	adc	r20, r20
 3c2:	64 e0       	ldi	r22, 0x04	; 4
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	62 e0       	ldi	r22, 0x02	; 2
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_sendData+0x7c>
 3da:	00 00       	nop
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	62 e0       	ldi	r22, 0x02	; 2
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 3e6:	4c 2f       	mov	r20, r28
 3e8:	41 70       	andi	r20, 0x01	; 1
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 3f2:	c1 fb       	bst	r28, 1
 3f4:	44 27       	eor	r20, r20
 3f6:	40 f9       	bld	r20, 0
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 400:	c2 fb       	bst	r28, 2
 402:	44 27       	eor	r20, r20
 404:	40 f9       	bld	r20, 0
 406:	62 e0       	ldi	r22, 0x02	; 2
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 40e:	c3 fb       	bst	r28, 3
 410:	44 27       	eor	r20, r20
 412:	40 f9       	bld	r20, 0
 414:	64 e0       	ldi	r22, 0x04	; 4
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	62 e0       	ldi	r22, 0x02	; 2
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 426:	95 e0       	ldi	r25, 0x05	; 5
 428:	9a 95       	dec	r25
 42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 42c:	00 00       	nop
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 ae 00 	call	0x15c	; 0x15c <dio_vidWriteChannel>
 438:	8f e3       	ldi	r24, 0x3F	; 63
 43a:	9f e1       	ldi	r25, 0x1F	; 31
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <lcd_displyChar>:
 448:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_sendData>
 44c:	08 95       	ret

0000044e <lcd_displyStr>:
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ec 01       	movw	r28, r24
 454:	03 c0       	rjmp	.+6      	; 0x45c <lcd_displyStr+0xe>
 456:	21 96       	adiw	r28, 0x01	; 1
 458:	0e 94 24 02 	call	0x448	; 0x448 <lcd_displyChar>
 45c:	88 81       	ld	r24, Y
 45e:	81 11       	cpse	r24, r1
 460:	fa cf       	rjmp	.-12     	; 0x456 <lcd_displyStr+0x8>
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <lcd_init>:
	}
}
void lcd_init(void){
	//Setting Command Port Channels as OUTPUT
	dio_vidConfigChannel(CommandPort,RSPIN,OUTPUT);
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 41 00 	call	0x82	; 0x82 <dio_vidConfigChannel>
	dio_vidConfigChannel(CommandPort,EPIN,OUTPUT);
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	62 e0       	ldi	r22, 0x02	; 2
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 41 00 	call	0x82	; 0x82 <dio_vidConfigChannel>
	//Setting Data Port Channels as OUTPUT
	dio_vidConfigChannel(DataPort,D4PIN,OUTPUT);
 47c:	41 e0       	ldi	r20, 0x01	; 1
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 41 00 	call	0x82	; 0x82 <dio_vidConfigChannel>
	dio_vidConfigChannel(DataPort,D5PIN,OUTPUT);
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 41 00 	call	0x82	; 0x82 <dio_vidConfigChannel>
	dio_vidConfigChannel(DataPort,D6PIN,OUTPUT);
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 41 00 	call	0x82	; 0x82 <dio_vidConfigChannel>
	dio_vidConfigChannel(DataPort,D7PIN,OUTPUT);
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	64 e0       	ldi	r22, 0x04	; 4
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 41 00 	call	0x82	; 0x82 <dio_vidConfigChannel>
	//Returns Cursor To Home Position
	lcd_sendCmd(HomeReturn);
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_sendCmd>
	//Starting LCD 4-bit 5*8 Matrix 2-line Mode
	lcd_sendCmd(MatrixFiveByTen);
 4aa:	88 e2       	ldi	r24, 0x28	; 40
 4ac:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_sendCmd>
	//Hiding Cursor
	lcd_sendCmd(HideCursor);
 4b0:	8c e0       	ldi	r24, 0x0C	; 12
 4b2:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_sendCmd>
	//Clearing LCD
	lcd_sendCmd(ClearLCD);
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_sendCmd>
 4bc:	08 95       	ret

000004be <main>:
int main(void)
{
    /* Replace with your application code */
	u8 x = 'A' ;
	u16 adress = 0X0101 ;
	EEPROM_VWrite_Byte(x,adress);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	71 e0       	ldi	r23, 0x01	; 1
 4c2:	81 e4       	ldi	r24, 0x41	; 65
 4c4:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_VWrite_Byte>
	u8 read_value = EEPROM_VRead_Byte(adress);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 1b 01 	call	0x236	; 0x236 <EEPROM_VRead_Byte>
 4d0:	c8 2f       	mov	r28, r24
	lcd_init();
 4d2:	0e 94 34 02 	call	0x468	; 0x468 <lcd_init>
	lcd_sendCmd(DisplayCursor);
 4d6:	8e e0       	ldi	r24, 0x0E	; 14
 4d8:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_sendCmd>
	lcd_displyStr((u8 *)"Char is:");
 4dc:	80 e6       	ldi	r24, 0x60	; 96
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_displyStr>
    while (1) 
    {
		DIO_DDRA_REG = 1<<4 ;
 4e4:	80 e1       	ldi	r24, 0x10	; 16
 4e6:	8a bb       	out	0x1a, r24	; 26
		if(read_value == 65)
 4e8:	c1 34       	cpi	r28, 0x41	; 65
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <main+0x26>
		{
			DIO_PORTA_REG = 1<<4 ;
 4ec:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ee:	2f ef       	ldi	r18, 0xFF	; 255
 4f0:	81 ee       	ldi	r24, 0xE1	; 225
 4f2:	94 e0       	ldi	r25, 0x04	; 4
 4f4:	21 50       	subi	r18, 0x01	; 1
 4f6:	80 40       	sbci	r24, 0x00	; 0
 4f8:	90 40       	sbci	r25, 0x00	; 0
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <main+0x36>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <main+0x40>
 4fe:	00 00       	nop
			_delay_ms(100);
			lcd_displyChar(read_value);
 500:	8c 2f       	mov	r24, r28
 502:	0e 94 24 02 	call	0x448	; 0x448 <lcd_displyChar>
 506:	ee cf       	rjmp	.-36     	; 0x4e4 <main+0x26>

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
