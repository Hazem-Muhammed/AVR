
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000788  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000788  000007fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ca3  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ac5  00000000  00000000  0000268b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bce  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000026c  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f7  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b23  00000000  00000000  00004683  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000051a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <main>
  7a:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <adc_vconfig>:
	//Voltage Reference Configuration
	#if (VOLTAGE_REFERENCE_CFG == AREF)
		CLEAR_BIT(ADMUX,REFS0_BIT);
		CLEAR_BIT(ADMUX,REFS1_BIT);
	#elif (VOLTAGE_REFERENCE_CFG == AVCC)
		SET_BIT(ADMUX,REFS0_BIT);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 64       	ori	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,REFS1_BIT);
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	8f 77       	andi	r24, 0x7F	; 127
  8c:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS1_BIT);
	#endif
	
	// Right or Left Adjustment
	#if (ADJUSTMENT_CFG == LEFT_ADJUSTMENT)
		SET_BIT(ADMUX,ADLAR_BIT);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	80 62       	ori	r24, 0x20	; 32
  92:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX2_BIT);
		CLEAR_BIT(ADMUX,MUX3_BIT);
		CLEAR_BIT(ADMUX,MUX4_BIT);
		dio_vidConfigChannel(DIO_PORTA,DIO_PIN0,INPUT);
	#elif (ADC_ANALOG_INPUT_CHANNEL_CFG == DIO_U8_PIN_1)
		SET_BIT(ADMUX,MUX0_BIT);
  94:	87 b1       	in	r24, 0x07	; 7
  96:	81 60       	ori	r24, 0x01	; 1
  98:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX1_BIT);
  9a:	87 b1       	in	r24, 0x07	; 7
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX2_BIT);
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	8b 7f       	andi	r24, 0xFB	; 251
  a4:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX3_BIT);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX4_BIT);
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	87 b9       	out	0x07, r24	; 7
		dio_vidConfigChannel(DIO_PORTA,DIO_PIN1,INPUT);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	
	
	
	/*  ( if / else if ) condition for Macros */
	#if RUNNING_MODE_CFG == FREE_RUNNING_MODE
		CLEAR_BIT( SFIOR , ADTS0_BIT );
  bc:	80 b7       	in	r24, 0x30	; 48
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	80 bf       	out	0x30, r24	; 48
		CLEAR_BIT( SFIOR , ADTS1_BIT );
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	8f 7b       	andi	r24, 0xBF	; 191
  c6:	80 bf       	out	0x30, r24	; 48
		CLEAR_BIT( SFIOR , ADTS2_BIT );
  c8:	80 b7       	in	r24, 0x30	; 48
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	80 bf       	out	0x30, r24	; 48
  ce:	08 95       	ret

000000d0 <ADC_voidInit>:

	
	/** Enable ADC Auto Trigger	 							   **/
	/** ADATE = 1 =====> 	SET_BIT( ADATE , 5 ); 			   **/

	SET_BIT( ADCSRA , ADATE_BIT );
  d0:	0e 94 41 00 	call	0x82	; 0x82 <adc_vconfig>
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	8f 77       	andi	r24, 0x7F	; 127
  d8:	86 b9       	out	0x06, r24	; 6
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	86 b9       	out	0x06, r24	; 6
  e0:	86 b1       	in	r24, 0x06	; 6
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	86 b9       	out	0x06, r24	; 6
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	86 b9       	out	0x06, r24	; 6
  ec:	86 b1       	in	r24, 0x06	; 6
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	86 b9       	out	0x06, r24	; 6
  f2:	08 95       	ret

000000f4 <ADC_voidEnable>:
  f4:	86 b1       	in	r24, 0x06	; 6
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	86 b9       	out	0x06, r24	; 6
  fa:	08 95       	ret

000000fc <ADC_voidStartConversion>:
  fc:	86 b1       	in	r24, 0x06	; 6
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	86 b9       	out	0x06, r24	; 6
 102:	08 95       	ret

00000104 <ADC_u16ReadADCInMV>:
/****************************************************************/

u16 ADC_u16ReadADCInMV()
{
	u16 my_result = 0 ;
	while( CHECK_BIT(ADCSRA , ADIF_BIT) == 0)
 104:	34 9b       	sbis	0x06, 4	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <ADC_u16ReadADCInMV>
	{
	}
	my_result = (u8)256*ADCL + ADCH  ;
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	85 b1       	in	r24, 0x05	; 5
	SET_BIT( ADCSRA , ADIF_BIT);
 10c:	96 b1       	in	r25, 0x06	; 6
 10e:	90 61       	ori	r25, 0x10	; 16
 110:	96 b9       	out	0x06, r25	; 6
	CLEAR_BIT( ADCSRA , ADSC_BIT );
 112:	96 b1       	in	r25, 0x06	; 6
 114:	9f 7b       	andi	r25, 0xBF	; 191
 116:	96 b9       	out	0x06, r25	; 6
	return my_result;
	
}
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret

0000011c <SET_GIE>:
/************************************* END OF PROGRAM ******************************************/
/***********************************************************************************************/

void SET_GIE (void)
{
	SET_BIT(SREG,7);
 11c:	8f b7       	in	r24, 0x3f	; 63
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	8f bf       	out	0x3f, r24	; 63
 122:	08 95       	ret

00000124 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	01 f1       	breq	.+64     	; 0x168 <dio_vidConfigChannel+0x44>
 128:	30 f0       	brcs	.+12     	; 0x136 <dio_vidConfigChannel+0x12>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	b1 f1       	breq	.+108    	; 0x19a <dio_vidConfigChannel+0x76>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	09 f4       	brne	.+2      	; 0x134 <dio_vidConfigChannel+0x10>
 132:	4c c0       	rjmp	.+152    	; 0x1cc <dio_vidConfigChannel+0xa8>
 134:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f4       	brne	.+22     	; 0x150 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 13a:	2a b3       	in	r18, 0x1a	; 26
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <dio_vidConfigChannel+0x22>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <dio_vidConfigChannel+0x1e>
 14a:	82 2b       	or	r24, r18
 14c:	8a bb       	out	0x1a, r24	; 26
 14e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 150:	2a b3       	in	r18, 0x1a	; 26
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <dio_vidConfigChannel+0x38>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <dio_vidConfigChannel+0x34>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	8a bb       	out	0x1a, r24	; 26
 166:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	59 f4       	brne	.+22     	; 0x182 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 16c:	27 b3       	in	r18, 0x17	; 23
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <dio_vidConfigChannel+0x54>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <dio_vidConfigChannel+0x50>
 17c:	82 2b       	or	r24, r18
 17e:	87 bb       	out	0x17, r24	; 23
 180:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 182:	27 b3       	in	r18, 0x17	; 23
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <dio_vidConfigChannel+0x6a>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <dio_vidConfigChannel+0x66>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	87 bb       	out	0x17, r24	; 23
 198:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	59 f4       	brne	.+22     	; 0x1b4 <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 19e:	24 b3       	in	r18, 0x14	; 20
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <dio_vidConfigChannel+0x86>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <dio_vidConfigChannel+0x82>
 1ae:	82 2b       	or	r24, r18
 1b0:	84 bb       	out	0x14, r24	; 20
 1b2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 1b4:	24 b3       	in	r18, 0x14	; 20
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <dio_vidConfigChannel+0x9c>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <dio_vidConfigChannel+0x98>
 1c4:	80 95       	com	r24
 1c6:	82 23       	and	r24, r18
 1c8:	84 bb       	out	0x14, r24	; 20
 1ca:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 1cc:	41 30       	cpi	r20, 0x01	; 1
 1ce:	59 f4       	brne	.+22     	; 0x1e6 <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 1d0:	21 b3       	in	r18, 0x11	; 17
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <dio_vidConfigChannel+0xb8>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <dio_vidConfigChannel+0xb4>
 1e0:	82 2b       	or	r24, r18
 1e2:	81 bb       	out	0x11, r24	; 17
 1e4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 1e6:	21 b3       	in	r18, 0x11	; 17
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <dio_vidConfigChannel+0xce>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <dio_vidConfigChannel+0xca>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	81 bb       	out	0x11, r24	; 17
 1fc:	08 95       	ret

000001fe <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	01 f1       	breq	.+64     	; 0x242 <dio_vidWriteChannel+0x44>
 202:	30 f0       	brcs	.+12     	; 0x210 <dio_vidWriteChannel+0x12>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	b1 f1       	breq	.+108    	; 0x274 <dio_vidWriteChannel+0x76>
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	09 f4       	brne	.+2      	; 0x20e <dio_vidWriteChannel+0x10>
 20c:	4c c0       	rjmp	.+152    	; 0x2a6 <dio_vidWriteChannel+0xa8>
 20e:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 210:	41 11       	cpse	r20, r1
 212:	0c c0       	rjmp	.+24     	; 0x22c <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 214:	2b b3       	in	r18, 0x1b	; 27
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <dio_vidWriteChannel+0x22>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <dio_vidWriteChannel+0x1e>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	8b bb       	out	0x1b, r24	; 27
 22a:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 22c:	2b b3       	in	r18, 0x1b	; 27
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <dio_vidWriteChannel+0x3a>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <dio_vidWriteChannel+0x36>
 23c:	82 2b       	or	r24, r18
 23e:	8b bb       	out	0x1b, r24	; 27
 240:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 242:	41 11       	cpse	r20, r1
 244:	0c c0       	rjmp	.+24     	; 0x25e <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <dio_vidWriteChannel+0x54>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <dio_vidWriteChannel+0x50>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 25e:	28 b3       	in	r18, 0x18	; 24
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <dio_vidWriteChannel+0x6c>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <dio_vidWriteChannel+0x68>
 26e:	82 2b       	or	r24, r18
 270:	88 bb       	out	0x18, r24	; 24
 272:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 274:	41 11       	cpse	r20, r1
 276:	0c c0       	rjmp	.+24     	; 0x290 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 278:	25 b3       	in	r18, 0x15	; 21
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <dio_vidWriteChannel+0x86>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <dio_vidWriteChannel+0x82>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	85 bb       	out	0x15, r24	; 21
 28e:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 290:	25 b3       	in	r18, 0x15	; 21
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <dio_vidWriteChannel+0x9e>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <dio_vidWriteChannel+0x9a>
 2a0:	82 2b       	or	r24, r18
 2a2:	85 bb       	out	0x15, r24	; 21
 2a4:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 2a6:	41 11       	cpse	r20, r1
 2a8:	0c c0       	rjmp	.+24     	; 0x2c2 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 2aa:	22 b3       	in	r18, 0x12	; 18
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <dio_vidWriteChannel+0xb8>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <dio_vidWriteChannel+0xb4>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	82 bb       	out	0x12, r24	; 18
 2c0:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 2c2:	22 b3       	in	r18, 0x12	; 18
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <dio_vidWriteChannel+0xd0>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <dio_vidWriteChannel+0xcc>
 2d2:	82 2b       	or	r24, r18
 2d4:	82 bb       	out	0x12, r24	; 18
 2d6:	08 95       	ret

000002d8 <lcd_sendCmd>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : parameterName   Parameter Describtion                                                                         
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void lcd_sendCmd(lcd_Cmd_Type cmd){
 2d8:	cf 93       	push	r28
 2da:	c8 2f       	mov	r28, r24
		//Initializing LCD Data Port to Zero
		dio_vidWriteChannel(DataPort,D4PIN,STD_LOW);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D5PIN,STD_LOW);
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D6PIN,STD_LOW);
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D7PIN,STD_LOW);
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		//Setting LCD to Command Mode
		dio_vidWriteChannel(CommandPort,RSPIN,STD_LOW);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	63 e0       	ldi	r22, 0x03	; 3
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		//Sending Higher nibble to Data Port
		dio_vidWriteChannel(DataPort,D4PIN,(CHECK_BIT(cmd,4)));
 30e:	c4 fb       	bst	r28, 4
 310:	44 27       	eor	r20, r20
 312:	40 f9       	bld	r20, 0
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D5PIN,(CHECK_BIT(cmd,5)));
 31c:	c5 fb       	bst	r28, 5
 31e:	44 27       	eor	r20, r20
 320:	40 f9       	bld	r20, 0
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D6PIN,(CHECK_BIT(cmd,6)));
 32a:	c6 fb       	bst	r28, 6
 32c:	44 27       	eor	r20, r20
 32e:	40 f9       	bld	r20, 0
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D7PIN,(CHECK_BIT(cmd,7)));
 338:	4c 2f       	mov	r20, r28
 33a:	44 1f       	adc	r20, r20
 33c:	44 27       	eor	r20, r20
 33e:	44 1f       	adc	r20, r20
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(CommandPort,EPIN,STD_HIGH);
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 352:	85 e0       	ldi	r24, 0x05	; 5
 354:	8a 95       	dec	r24
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd_sendCmd+0x7c>
 358:	00 00       	nop
		_delay_us(1);
		dio_vidWriteChannel(CommandPort,EPIN,STD_LOW);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		//Sending Lower nibble to Data Port
		dio_vidWriteChannel(DataPort,D4PIN,(CHECK_BIT(cmd,0)));
 364:	4c 2f       	mov	r20, r28
 366:	41 70       	andi	r20, 0x01	; 1
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D5PIN,(CHECK_BIT(cmd,1)));
 370:	c1 fb       	bst	r28, 1
 372:	44 27       	eor	r20, r20
 374:	40 f9       	bld	r20, 0
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D6PIN,(CHECK_BIT(cmd,2)));
 37e:	c2 fb       	bst	r28, 2
 380:	44 27       	eor	r20, r20
 382:	40 f9       	bld	r20, 0
 384:	62 e0       	ldi	r22, 0x02	; 2
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D7PIN,(CHECK_BIT(cmd,3)));
 38c:	c3 fb       	bst	r28, 3
 38e:	44 27       	eor	r20, r20
 390:	40 f9       	bld	r20, 0
 392:	64 e0       	ldi	r22, 0x04	; 4
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(CommandPort,EPIN,STD_HIGH);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	62 e0       	ldi	r22, 0x02	; 2
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
 3a4:	95 e0       	ldi	r25, 0x05	; 5
 3a6:	9a 95       	dec	r25
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcd_sendCmd+0xce>
 3aa:	00 00       	nop
		_delay_us(1);
		dio_vidWriteChannel(CommandPort,EPIN,STD_LOW);
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	9f e1       	ldi	r25, 0x1F	; 31
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_sendCmd+0xe2>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <lcd_sendCmd+0xe8>
 3c0:	00 00       	nop
		//Busy wait to allow LCD to process the command
		_delay_ms(2);	
}
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <lcd_sendData>:
void lcd_sendData(u8 data){
 3c6:	cf 93       	push	r28
 3c8:	c8 2f       	mov	r28, r24
		//Initializing LCD Data Port to Zero
		dio_vidWriteChannel(DataPort,D4PIN,STD_LOW);
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D5PIN,STD_LOW);
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D6PIN,STD_LOW);
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D7PIN,STD_LOW);
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	64 e0       	ldi	r22, 0x04	; 4
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		//Setting to LCD to data mode
		dio_vidWriteChannel(CommandPort,RSPIN,STD_HIGH);
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		//Sending Higher nibble to Data Port
		dio_vidWriteChannel(DataPort,D4PIN,(CHECK_BIT(data,4)));
 3fc:	c4 fb       	bst	r28, 4
 3fe:	44 27       	eor	r20, r20
 400:	40 f9       	bld	r20, 0
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D5PIN,(CHECK_BIT(data,5)));
 40a:	c5 fb       	bst	r28, 5
 40c:	44 27       	eor	r20, r20
 40e:	40 f9       	bld	r20, 0
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D6PIN,(CHECK_BIT(data,6)));
 418:	c6 fb       	bst	r28, 6
 41a:	44 27       	eor	r20, r20
 41c:	40 f9       	bld	r20, 0
 41e:	62 e0       	ldi	r22, 0x02	; 2
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D7PIN,(CHECK_BIT(data,7)));
 426:	4c 2f       	mov	r20, r28
 428:	44 1f       	adc	r20, r20
 42a:	44 27       	eor	r20, r20
 42c:	44 1f       	adc	r20, r20
 42e:	64 e0       	ldi	r22, 0x04	; 4
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(CommandPort,EPIN,STD_HIGH);
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	62 e0       	ldi	r22, 0x02	; 2
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 440:	85 e0       	ldi	r24, 0x05	; 5
 442:	8a 95       	dec	r24
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 00       	nop
		_delay_us(1);
		dio_vidWriteChannel(CommandPort,EPIN,STD_LOW);
 448:	40 e0       	ldi	r20, 0x00	; 0
 44a:	62 e0       	ldi	r22, 0x02	; 2
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		//Sending Lower nibble to Data Port
		dio_vidWriteChannel(DataPort,D4PIN,(CHECK_BIT(data,0)));
 452:	4c 2f       	mov	r20, r28
 454:	41 70       	andi	r20, 0x01	; 1
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D5PIN,(CHECK_BIT(data,1)));
 45e:	c1 fb       	bst	r28, 1
 460:	44 27       	eor	r20, r20
 462:	40 f9       	bld	r20, 0
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D6PIN,(CHECK_BIT(data,2)));
 46c:	c2 fb       	bst	r28, 2
 46e:	44 27       	eor	r20, r20
 470:	40 f9       	bld	r20, 0
 472:	62 e0       	ldi	r22, 0x02	; 2
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(DataPort,D7PIN,(CHECK_BIT(data,3)));
 47a:	c3 fb       	bst	r28, 3
 47c:	44 27       	eor	r20, r20
 47e:	40 f9       	bld	r20, 0
 480:	64 e0       	ldi	r22, 0x04	; 4
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		dio_vidWriteChannel(CommandPort,EPIN,STD_HIGH);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
 492:	95 e0       	ldi	r25, 0x05	; 5
 494:	9a 95       	dec	r25
 496:	f1 f7       	brne	.-4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 498:	00 00       	nop
		_delay_us(1);
		dio_vidWriteChannel(CommandPort,EPIN,STD_LOW);
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a4:	8f e3       	ldi	r24, 0x3F	; 63
 4a6:	9f e1       	ldi	r25, 0x1F	; 31
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4ae:	00 00       	nop
		//Busy wait to allow LCD to process the command
		_delay_ms(2);
}
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <lcd_displyChar>:
void lcd_displyChar(u8 chr){
	lcd_sendData(chr);
 4b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_sendData>
 4b8:	08 95       	ret

000004ba <lcd_displyStr>:
}
void lcd_displyStr(u8* str){
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	ec 01       	movw	r28, r24
	while((*str))
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <lcd_displyStr+0xe>
		lcd_displyChar(*str++);	
 4c2:	21 96       	adiw	r28, 0x01	; 1
 4c4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcd_displyChar>
}
void lcd_displyChar(u8 chr){
	lcd_sendData(chr);
}
void lcd_displyStr(u8* str){
	while((*str))
 4c8:	88 81       	ld	r24, Y
 4ca:	81 11       	cpse	r24, r1
 4cc:	fa cf       	rjmp	.-12     	; 0x4c2 <lcd_displyStr+0x8>
		lcd_displyChar(*str++);	
}
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <lcd_gotoRowColumn>:
void lcd_gotoRowColumn(u8 row, u8 column){
	u8 CursorPosition=0x80;
	switch(row){
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	59 f0       	breq	.+22     	; 0x4ee <lcd_gotoRowColumn+0x1a>
 4d8:	28 f0       	brcs	.+10     	; 0x4e4 <lcd_gotoRowColumn+0x10>
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	69 f0       	breq	.+26     	; 0x4f8 <lcd_gotoRowColumn+0x24>
 4de:	83 30       	cpi	r24, 0x03	; 3
 4e0:	81 f0       	breq	.+32     	; 0x502 <lcd_gotoRowColumn+0x2e>
 4e2:	08 95       	ret
		case 0:CursorPosition=0x80;CursorPosition+=column;lcd_sendCmd(CursorPosition);break;
 4e4:	80 e8       	ldi	r24, 0x80	; 128
 4e6:	86 0f       	add	r24, r22
 4e8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
 4ec:	08 95       	ret
		case 1:CursorPosition=0xC0;CursorPosition+=column;lcd_sendCmd(CursorPosition);break;
 4ee:	80 ec       	ldi	r24, 0xC0	; 192
 4f0:	86 0f       	add	r24, r22
 4f2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
 4f6:	08 95       	ret
		case 2:CursorPosition=0x94;CursorPosition+=column;lcd_sendCmd(CursorPosition);break;
 4f8:	84 e9       	ldi	r24, 0x94	; 148
 4fa:	86 0f       	add	r24, r22
 4fc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
 500:	08 95       	ret
		case 3:CursorPosition=0xD4;CursorPosition+=column;lcd_sendCmd(CursorPosition);break;
 502:	84 ed       	ldi	r24, 0xD4	; 212
 504:	86 0f       	add	r24, r22
 506:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
 50a:	08 95       	ret

0000050c <lcd_init>:
	}
}
void lcd_init(void){
	//Setting Command Port Channels as OUTPUT
	dio_vidConfigChannel(CommandPort,RSPIN,OUTPUT);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	63 e0       	ldi	r22, 0x03	; 3
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	dio_vidConfigChannel(CommandPort,EPIN,OUTPUT);
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	62 e0       	ldi	r22, 0x02	; 2
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	//Setting Data Port Channels as OUTPUT
	dio_vidConfigChannel(DataPort,D4PIN,OUTPUT);
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	dio_vidConfigChannel(DataPort,D5PIN,OUTPUT);
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	dio_vidConfigChannel(DataPort,D6PIN,OUTPUT);
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	62 e0       	ldi	r22, 0x02	; 2
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	dio_vidConfigChannel(DataPort,D7PIN,OUTPUT);
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	64 e0       	ldi	r22, 0x04	; 4
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	//Returns Cursor To Home Position
	lcd_sendCmd(HomeReturn);
 548:	82 e0       	ldi	r24, 0x02	; 2
 54a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
	//Starting LCD 4-bit 5*8 Matrix 2-line Mode
	lcd_sendCmd(MatrixFiveByTen);
 54e:	88 e2       	ldi	r24, 0x28	; 40
 550:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
	//Hiding Cursor
	lcd_sendCmd(HideCursor);
 554:	8c e0       	ldi	r24, 0x0C	; 12
 556:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
	//Clearing LCD
	lcd_sendCmd(ClearLCD);
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
 560:	08 95       	ret

00000562 <lcd_vidDisplyNum>:
}


void lcd_vidDisplyNum(u16 num)
{
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	c4 56       	subi	r28, 0x64	; 100
 56e:	d1 09       	sbc	r29, r1
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	ac 01       	movw	r20, r24
	if (num ==0)
 57c:	89 2b       	or	r24, r25
 57e:	81 f5       	brne	.+96     	; 0x5e0 <lcd_vidDisplyNum+0x7e>
	{
		lcd_sendData('0');
 580:	80 e3       	ldi	r24, 0x30	; 48
 582:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_sendData>
 586:	41 c0       	rjmp	.+130    	; 0x60a <lcd_vidDisplyNum+0xa8>
	else
	{
		u8 num_to_char_array[100], iterator = 0;
		while(num != 0)
		{
			num_to_char_array[iterator] = (u8)(num % 10);
 588:	9a 01       	movw	r18, r20
 58a:	ad ec       	ldi	r26, 0xCD	; 205
 58c:	bc ec       	ldi	r27, 0xCC	; 204
 58e:	0e 94 b3 03 	call	0x766	; 0x766 <__umulhisi3>
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	96 95       	lsr	r25
 598:	87 95       	ror	r24
 59a:	96 95       	lsr	r25
 59c:	87 95       	ror	r24
 59e:	9c 01       	movw	r18, r24
 5a0:	22 0f       	add	r18, r18
 5a2:	33 1f       	adc	r19, r19
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	82 0f       	add	r24, r18
 5b2:	93 1f       	adc	r25, r19
 5b4:	9a 01       	movw	r18, r20
 5b6:	28 1b       	sub	r18, r24
 5b8:	39 0b       	sbc	r19, r25
 5ba:	e1 e0       	ldi	r30, 0x01	; 1
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	ec 0f       	add	r30, r28
 5c0:	fd 1f       	adc	r31, r29
 5c2:	e1 0f       	add	r30, r17
 5c4:	f1 1d       	adc	r31, r1
 5c6:	20 83       	st	Z, r18
			num /= 10;
 5c8:	9a 01       	movw	r18, r20
 5ca:	0e 94 b3 03 	call	0x766	; 0x766 <__umulhisi3>
 5ce:	ac 01       	movw	r20, r24
 5d0:	56 95       	lsr	r21
 5d2:	47 95       	ror	r20
 5d4:	56 95       	lsr	r21
 5d6:	47 95       	ror	r20
 5d8:	56 95       	lsr	r21
 5da:	47 95       	ror	r20
			iterator++;
 5dc:	1f 5f       	subi	r17, 0xFF	; 255
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <lcd_vidDisplyNum+0x80>
 5e0:	10 e0       	ldi	r17, 0x00	; 0
		lcd_sendData('0');
	}
	else
	{
		u8 num_to_char_array[100], iterator = 0;
		while(num != 0)
 5e2:	41 15       	cp	r20, r1
 5e4:	51 05       	cpc	r21, r1
 5e6:	81 f6       	brne	.-96     	; 0x588 <lcd_vidDisplyNum+0x26>
 5e8:	0e c0       	rjmp	.+28     	; 0x606 <lcd_vidDisplyNum+0xa4>
			num /= 10;
			iterator++;
		}
		for(;iterator > 0; iterator--)
		{
			lcd_sendData('0' + (num_to_char_array[iterator-1]));
 5ea:	e1 2f       	mov	r30, r17
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	31 97       	sbiw	r30, 0x01	; 1
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	8c 0f       	add	r24, r28
 5f6:	9d 1f       	adc	r25, r29
 5f8:	e8 0f       	add	r30, r24
 5fa:	f9 1f       	adc	r31, r25
 5fc:	80 81       	ld	r24, Z
 5fe:	80 5d       	subi	r24, 0xD0	; 208
 600:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_sendData>
		{
			num_to_char_array[iterator] = (u8)(num % 10);
			num /= 10;
			iterator++;
		}
		for(;iterator > 0; iterator--)
 604:	11 50       	subi	r17, 0x01	; 1
 606:	11 11       	cpse	r17, r1
 608:	f0 cf       	rjmp	.-32     	; 0x5ea <lcd_vidDisplyNum+0x88>
		{
			lcd_sendData('0' + (num_to_char_array[iterator-1]));
		}
	}

}
 60a:	cc 59       	subi	r28, 0x9C	; 156
 60c:	df 4f       	sbci	r29, 0xFF	; 255
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	08 95       	ret

00000620 <led_init>:
* \Parameters (in) : None                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_init(void)
{
	dio_vidConfigChannel(LED_RED_PORT,LED_RED_CHANNEL,OUTPUT);
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	67 e0       	ldi	r22, 0x07	; 7
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,OUTPUT);
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	64 e0       	ldi	r22, 0x04	; 4
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,OUTPUT);
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	65 e0       	ldi	r22, 0x05	; 5
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,OUTPUT);
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	66 e0       	ldi	r22, 0x06	; 6
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	0e 94 92 00 	call	0x124	; 0x124 <dio_vidConfigChannel>

	dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_LOW);
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	67 e0       	ldi	r22, 0x07	; 7
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
	dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_LOW);
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	64 e0       	ldi	r22, 0x04	; 4
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
	dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_LOW);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	65 e0       	ldi	r22, 0x05	; 5
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
	dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	66 e0       	ldi	r22, 0x06	; 6
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
 670:	08 95       	ret

00000672 <led_on>:
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_on(led_id_t ledId)
{
	switch(ledId)
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	61 f0       	breq	.+24     	; 0x68e <led_on+0x1c>
 676:	28 f0       	brcs	.+10     	; 0x682 <led_on+0x10>
 678:	82 30       	cpi	r24, 0x02	; 2
 67a:	79 f0       	breq	.+30     	; 0x69a <led_on+0x28>
 67c:	83 30       	cpi	r24, 0x03	; 3
 67e:	99 f0       	breq	.+38     	; 0x6a6 <led_on+0x34>
 680:	08 95       	ret
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_HIGH);
 682:	41 e0       	ldi	r20, 0x01	; 1
 684:	67 e0       	ldi	r22, 0x07	; 7
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_LOW);
		#endif		
		break;
 68c:	08 95       	ret
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_HIGH);
 68e:	41 e0       	ldi	r20, 0x01	; 1
 690:	64 e0       	ldi	r22, 0x04	; 4
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_LOW);
		#endif
		break;
 698:	08 95       	ret
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_HIGH);
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	65 e0       	ldi	r22, 0x05	; 5
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_LOW);
		#endif
		break;
 6a4:	08 95       	ret
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_HIGH);
 6a6:	41 e0       	ldi	r20, 0x01	; 1
 6a8:	66 e0       	ldi	r22, 0x06	; 6
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
 6b0:	08 95       	ret

000006b2 <led_off>:
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_off(led_id_t ledId)
{
	switch(ledId)
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	61 f0       	breq	.+24     	; 0x6ce <led_off+0x1c>
 6b6:	28 f0       	brcs	.+10     	; 0x6c2 <led_off+0x10>
 6b8:	82 30       	cpi	r24, 0x02	; 2
 6ba:	79 f0       	breq	.+30     	; 0x6da <led_off+0x28>
 6bc:	83 30       	cpi	r24, 0x03	; 3
 6be:	99 f0       	breq	.+38     	; 0x6e6 <led_off+0x34>
 6c0:	08 95       	ret
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_LOW);
 6c2:	40 e0       	ldi	r20, 0x00	; 0
 6c4:	67 e0       	ldi	r22, 0x07	; 7
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_HIGH);
		#endif		
		break;
 6cc:	08 95       	ret
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_LOW);
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	64 e0       	ldi	r22, 0x04	; 4
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_HIGH);
		#endif
		break;
 6d8:	08 95       	ret
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_LOW);
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	65 e0       	ldi	r22, 0x05	; 5
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_HIGH);
		#endif
		break;
 6e4:	08 95       	ret
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	66 e0       	ldi	r22, 0x06	; 6
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	0e 94 ff 00 	call	0x1fe	; 0x1fe <dio_vidWriteChannel>
 6f0:	08 95       	ret

000006f2 <main>:
#include "lcd.h"


int main(void)
{
    led_init();
 6f2:	0e 94 10 03 	call	0x620	; 0x620 <led_init>
	ADC_voidInit();
 6f6:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_voidInit>
	ADC_voidEnable();
 6fa:	0e 94 7a 00 	call	0xf4	; 0xf4 <ADC_voidEnable>
	SET_GIE();
 6fe:	0e 94 8e 00 	call	0x11c	; 0x11c <SET_GIE>
	lcd_init();
 702:	0e 94 86 02 	call	0x50c	; 0x50c <lcd_init>
	lcd_sendCmd(DisplayCursor);
 706:	8e e0       	ldi	r24, 0x0E	; 14
 708:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
	u8 * welcome = (u8 *)"ADC VALUE IS:";
	lcd_displyStr(welcome);
 70c:	80 e6       	ldi	r24, 0x60	; 96
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_displyStr>
	
    while (1) 
    {
		ADC_voidStartConversion();
 714:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_voidStartConversion>
		u16 x = 0;
		lcd_gotoRowColumn(0,0);
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_gotoRowColumn>
		lcd_displyStr(welcome);
 720:	80 e6       	ldi	r24, 0x60	; 96
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_displyStr>
		x= ADC_u16ReadADCInMV();
 728:	0e 94 82 00 	call	0x104	; 0x104 <ADC_u16ReadADCInMV>
 72c:	ec 01       	movw	r28, r24
		lcd_vidDisplyNum(x);
 72e:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_vidDisplyNum>
 732:	2f ef       	ldi	r18, 0xFF	; 255
 734:	83 ed       	ldi	r24, 0xD3	; 211
 736:	90 e3       	ldi	r25, 0x30	; 48
 738:	21 50       	subi	r18, 0x01	; 1
 73a:	80 40       	sbci	r24, 0x00	; 0
 73c:	90 40       	sbci	r25, 0x00	; 0
 73e:	e1 f7       	brne	.-8      	; 0x738 <main+0x46>
 740:	00 c0       	rjmp	.+0      	; 0x742 <main+0x50>
 742:	00 00       	nop
		_delay_ms(1000);
		lcd_sendCmd(ClearLCD);
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_sendCmd>
		if(x == 0)
 74a:	cd 2b       	or	r28, r29
 74c:	21 f4       	brne	.+8      	; 0x756 <main+0x64>
			led_off(LED_GREEN);
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	0e 94 59 03 	call	0x6b2	; 0x6b2 <led_off>
 754:	03 c0       	rjmp	.+6      	; 0x75c <main+0x6a>
		else
			led_on(LED_GREEN);
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	0e 94 39 03 	call	0x672	; 0x672 <led_on>
		lcd_gotoRowColumn(0,13);
 75c:	6d e0       	ldi	r22, 0x0D	; 13
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_gotoRowColumn>
    }
 764:	d7 cf       	rjmp	.-82     	; 0x714 <main+0x22>

00000766 <__umulhisi3>:
 766:	a2 9f       	mul	r26, r18
 768:	b0 01       	movw	r22, r0
 76a:	b3 9f       	mul	r27, r19
 76c:	c0 01       	movw	r24, r0
 76e:	a3 9f       	mul	r26, r19
 770:	70 0d       	add	r23, r0
 772:	81 1d       	adc	r24, r1
 774:	11 24       	eor	r1, r1
 776:	91 1d       	adc	r25, r1
 778:	b2 9f       	mul	r27, r18
 77a:	70 0d       	add	r23, r0
 77c:	81 1d       	adc	r24, r1
 77e:	11 24       	eor	r1, r1
 780:	91 1d       	adc	r25, r1
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
