
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3f  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062a  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059c  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a4  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 10 01 	call	0x220	; 0x220 <main>
  64:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	01 f1       	breq	.+64     	; 0xb0 <dio_vidConfigChannel+0x44>
  70:	30 f0       	brcs	.+12     	; 0x7e <dio_vidConfigChannel+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	b1 f1       	breq	.+108    	; 0xe2 <dio_vidConfigChannel+0x76>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <dio_vidConfigChannel+0x10>
  7a:	4c c0       	rjmp	.+152    	; 0x114 <dio_vidConfigChannel+0xa8>
  7c:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <dio_vidConfigChannel+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <dio_vidConfigChannel+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <dio_vidConfigChannel+0x38>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <dio_vidConfigChannel+0x34>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	59 f4       	brne	.+22     	; 0xca <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  b4:	27 b3       	in	r18, 0x17	; 23
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <dio_vidConfigChannel+0x54>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <dio_vidConfigChannel+0x50>
  c4:	82 2b       	or	r24, r18
  c6:	87 bb       	out	0x17, r24	; 23
  c8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <dio_vidConfigChannel+0x6a>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <dio_vidConfigChannel+0x66>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	59 f4       	brne	.+22     	; 0xfc <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  e6:	24 b3       	in	r18, 0x14	; 20
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <dio_vidConfigChannel+0x86>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <dio_vidConfigChannel+0x82>
  f6:	82 2b       	or	r24, r18
  f8:	84 bb       	out	0x14, r24	; 20
  fa:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <dio_vidConfigChannel+0x9c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <dio_vidConfigChannel+0x98>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	59 f4       	brne	.+22     	; 0x12e <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 118:	21 b3       	in	r18, 0x11	; 17
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <dio_vidConfigChannel+0xb8>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <dio_vidConfigChannel+0xb4>
 128:	82 2b       	or	r24, r18
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <dio_vidConfigChannel+0xce>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <dio_vidConfigChannel+0xca>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	81 bb       	out	0x11, r24	; 17
 144:	08 95       	ret

00000146 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	01 f1       	breq	.+64     	; 0x18a <dio_vidWriteChannel+0x44>
 14a:	30 f0       	brcs	.+12     	; 0x158 <dio_vidWriteChannel+0x12>
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	b1 f1       	breq	.+108    	; 0x1bc <dio_vidWriteChannel+0x76>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	09 f4       	brne	.+2      	; 0x156 <dio_vidWriteChannel+0x10>
 154:	4c c0       	rjmp	.+152    	; 0x1ee <dio_vidWriteChannel+0xa8>
 156:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 158:	41 11       	cpse	r20, r1
 15a:	0c c0       	rjmp	.+24     	; 0x174 <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 15c:	2b b3       	in	r18, 0x1b	; 27
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <dio_vidWriteChannel+0x22>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <dio_vidWriteChannel+0x1e>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	8b bb       	out	0x1b, r24	; 27
 172:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 174:	2b b3       	in	r18, 0x1b	; 27
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <dio_vidWriteChannel+0x3a>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <dio_vidWriteChannel+0x36>
 184:	82 2b       	or	r24, r18
 186:	8b bb       	out	0x1b, r24	; 27
 188:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 18a:	41 11       	cpse	r20, r1
 18c:	0c c0       	rjmp	.+24     	; 0x1a6 <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 18e:	28 b3       	in	r18, 0x18	; 24
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <dio_vidWriteChannel+0x54>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <dio_vidWriteChannel+0x50>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <dio_vidWriteChannel+0x6c>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <dio_vidWriteChannel+0x68>
 1b6:	82 2b       	or	r24, r18
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 1bc:	41 11       	cpse	r20, r1
 1be:	0c c0       	rjmp	.+24     	; 0x1d8 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 1c0:	25 b3       	in	r18, 0x15	; 21
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <dio_vidWriteChannel+0x86>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <dio_vidWriteChannel+0x82>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	85 bb       	out	0x15, r24	; 21
 1d6:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 1d8:	25 b3       	in	r18, 0x15	; 21
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <dio_vidWriteChannel+0x9e>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <dio_vidWriteChannel+0x9a>
 1e8:	82 2b       	or	r24, r18
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 1ee:	41 11       	cpse	r20, r1
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 1f2:	22 b3       	in	r18, 0x12	; 18
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <dio_vidWriteChannel+0xb8>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <dio_vidWriteChannel+0xb4>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	82 bb       	out	0x12, r24	; 18
 208:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <dio_vidWriteChannel+0xd0>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <dio_vidWriteChannel+0xcc>
 21a:	82 2b       	or	r24, r18
 21c:	82 bb       	out	0x12, r24	; 18
 21e:	08 95       	ret

00000220 <main>:
#define F_CPU 8000000UL
#include "SPI_Init.h"
#include "util/delay.h"
int main(void)
{
	SPI_Master_VInit();
 220:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_Master_VInit>
	Enable_GIE();
 224:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Enable_GIE>
    /* Replace with your application code */
    while (1) 
    {
		SPI_Master_VTransmit_Byte(0b11110000);
 228:	80 ef       	ldi	r24, 0xF0	; 240
 22a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SPI_Master_VTransmit_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	81 ee       	ldi	r24, 0xE1	; 225
 232:	94 e0       	ldi	r25, 0x04	; 4
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x14>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x1e>
 23e:	00 00       	nop
 240:	f3 cf       	rjmp	.-26     	; 0x228 <main+0x8>

00000242 <SPI_Vconfig>:
void SPI_Vconfig()
{
	#if (DATA_ORDER_CONFIG == DATA_FROM_LSB_FIRST)
		SET_BIT(SPCR,DORD_BIT);
	#elif (DATA_ORDER_CONFIG == DATA_FROM_MSB_FIRST)
		CLEAR_BIT(SPCR,DORD_BIT);
 242:	8d b1       	in	r24, 0x0d	; 13
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	8d b9       	out	0x0d, r24	; 13
	#endif
	
	
	#if (CURRENT_CONFIG_M_OR_S == MASTER_MODE)
		SET_BIT(SPCR,MSTR_BIT);	
 248:	8d b1       	in	r24, 0x0d	; 13
 24a:	80 61       	ori	r24, 0x10	; 16
 24c:	8d b9       	out	0x0d, r24	; 13
		#elif (CURRENT_CLK_RATE == CLK_RATE_OVER_8)
			SET_BIT(SPCR,SPR_0_BIT);
			CLEAR_BIT(SPCR,SPR_1_BIT);
			SET_BIT(SPCR,SPI2X_BIT);
		#elif (CURRENT_CLK_RATE == CLK_RATE_OVER_32_2)
			CLEAR_BIT(SPCR,SPR_0_BIT);
 24e:	8d b1       	in	r24, 0x0d	; 13
 250:	8e 7f       	andi	r24, 0xFE	; 254
 252:	8d b9       	out	0x0d, r24	; 13
			SET_BIT(SPCR,SPR_1_BIT);
 254:	8d b1       	in	r24, 0x0d	; 13
 256:	82 60       	ori	r24, 0x02	; 2
 258:	8d b9       	out	0x0d, r24	; 13
			SET_BIT(SPCR,SPI2X_BIT);
 25a:	8d b1       	in	r24, 0x0d	; 13
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	8d b9       	out	0x0d, r24	; 13
	
	
	#if (CURRENT_CLK_POLARITY ==CLK_POLARITY_RISING )
		CLEAR_BIT(SPCR,CPOL_BIT);
	#elif (CURRENT_CLK_POLARITY ==CLK_POLARITY_FALLING )
		SET_BIT(SPCR,CPOL_BIT);
 260:	8d b1       	in	r24, 0x0d	; 13
 262:	88 60       	ori	r24, 0x08	; 8
 264:	8d b9       	out	0x0d, r24	; 13
	#endif
	
	
	#if (CURRENT_CLK_PHASE == CLK_POLARITY_PHASE_SAMPLE_LEAD)
		CLEAR_BIT(SPCR,CPHA_BIT);
 266:	8d b1       	in	r24, 0x0d	; 13
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	8d b9       	out	0x0d, r24	; 13
 26c:	08 95       	ret

0000026e <SPI_Master_VInit>:
/****************************************************/
void SPI_Slave_VTransmit_Byte(u8 byte)
{
	SPDR = byte;
	while( !(CHECK_BIT(SPSR,SPIF_BIT))  );
}
 26e:	0e 94 21 01 	call	0x242	; 0x242 <SPI_Vconfig>
 272:	8d b1       	in	r24, 0x0d	; 13
 274:	80 68       	ori	r24, 0x80	; 128
 276:	8d b9       	out	0x0d, r24	; 13
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	65 e0       	ldi	r22, 0x05	; 5
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	66 e0       	ldi	r22, 0x06	; 6
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	67 e0       	ldi	r22, 0x07	; 7
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 36 00 	call	0x6c	; 0x6c <dio_vidConfigChannel>
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 a3 00 	call	0x146	; 0x146 <dio_vidWriteChannel>
 2aa:	8d b1       	in	r24, 0x0d	; 13
 2ac:	80 61       	ori	r24, 0x10	; 16
 2ae:	8d b9       	out	0x0d, r24	; 13
 2b0:	8d b1       	in	r24, 0x0d	; 13
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	8d b9       	out	0x0d, r24	; 13
 2b6:	08 95       	ret

000002b8 <SPI_Master_VTransmit_Byte>:
 2b8:	cf 93       	push	r28
 2ba:	c8 2f       	mov	r28, r24
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	64 e0       	ldi	r22, 0x04	; 4
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 a3 00 	call	0x146	; 0x146 <dio_vidWriteChannel>
 2c6:	cf b9       	out	0x0f, r28	; 15
 2c8:	77 9b       	sbis	0x0e, 7	; 14
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <SPI_Master_VTransmit_Byte+0x10>
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <Enable_GIE>:
/****************************************************/
void Enable_GIE(void)
{
	SET_BIT(SREG,GIE_BIT);
 2d0:	8f b7       	in	r24, 0x3f	; 63
 2d2:	80 68       	ori	r24, 0x80	; 128
 2d4:	8f bf       	out	0x3f, r24	; 63
 2d6:	08 95       	ret

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
