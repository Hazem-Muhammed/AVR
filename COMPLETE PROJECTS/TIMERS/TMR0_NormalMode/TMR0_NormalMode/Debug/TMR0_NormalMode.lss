
TMR0_NormalMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000004de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106f  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ea  00000000  00000000  00001f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00002628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069c  00000000  00000000  000028bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e6  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000353e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_10>
  2c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  74:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <dio_vidConfigChannel>:
					 value -> data value
					 mask  -> data mask
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask)
{
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	01 f1       	breq	.+64     	; 0xc0 <dio_vidConfigChannel+0x44>
  80:	30 f0       	brcs	.+12     	; 0x8e <dio_vidConfigChannel+0x12>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	b1 f1       	breq	.+108    	; 0xf2 <dio_vidConfigChannel+0x76>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	09 f4       	brne	.+2      	; 0x8c <dio_vidConfigChannel+0x10>
  8a:	4c c0       	rjmp	.+152    	; 0x124 <dio_vidConfigChannel+0xa8>
  8c:	08 95       	ret
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	59 f4       	brne	.+22     	; 0xa8 <dio_vidConfigChannel+0x2c>
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <dio_vidConfigChannel+0x22>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <dio_vidConfigChannel+0x1e>
  a2:	82 2b       	or	r24, r18
  a4:	8a bb       	out	0x1a, r24	; 26
  a6:	08 95       	ret
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <dio_vidConfigChannel+0x38>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <dio_vidConfigChannel+0x34>
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	59 f4       	brne	.+22     	; 0xda <dio_vidConfigChannel+0x5e>
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <dio_vidConfigChannel+0x54>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <dio_vidConfigChannel+0x50>
  d4:	82 2b       	or	r24, r18
  d6:	87 bb       	out	0x17, r24	; 23
  d8:	08 95       	ret
  da:	27 b3       	in	r18, 0x17	; 23
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <dio_vidConfigChannel+0x6a>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <dio_vidConfigChannel+0x66>
  ea:	80 95       	com	r24
  ec:	82 23       	and	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	59 f4       	brne	.+22     	; 0x10c <dio_vidConfigChannel+0x90>
  f6:	24 b3       	in	r18, 0x14	; 20
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <dio_vidConfigChannel+0x86>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <dio_vidConfigChannel+0x82>
 106:	82 2b       	or	r24, r18
 108:	84 bb       	out	0x14, r24	; 20
 10a:	08 95       	ret
 10c:	24 b3       	in	r18, 0x14	; 20
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <dio_vidConfigChannel+0x9c>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <dio_vidConfigChannel+0x98>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	59 f4       	brne	.+22     	; 0x13e <dio_vidConfigChannel+0xc2>
 128:	21 b3       	in	r18, 0x11	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <dio_vidConfigChannel+0xb8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <dio_vidConfigChannel+0xb4>
 138:	82 2b       	or	r24, r18
 13a:	81 bb       	out	0x11, r24	; 17
 13c:	08 95       	ret
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <dio_vidConfigChannel+0xce>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <dio_vidConfigChannel+0xca>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret

00000156 <dio_vidWriteChannel>:
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	01 f1       	breq	.+64     	; 0x19a <dio_vidWriteChannel+0x44>
 15a:	30 f0       	brcs	.+12     	; 0x168 <dio_vidWriteChannel+0x12>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	b1 f1       	breq	.+108    	; 0x1cc <dio_vidWriteChannel+0x76>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	09 f4       	brne	.+2      	; 0x166 <dio_vidWriteChannel+0x10>
 164:	4c c0       	rjmp	.+152    	; 0x1fe <dio_vidWriteChannel+0xa8>
 166:	08 95       	ret
 168:	41 11       	cpse	r20, r1
 16a:	0c c0       	rjmp	.+24     	; 0x184 <dio_vidWriteChannel+0x2e>
 16c:	2b b3       	in	r18, 0x1b	; 27
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <dio_vidWriteChannel+0x22>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <dio_vidWriteChannel+0x1e>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	8b bb       	out	0x1b, r24	; 27
 182:	08 95       	ret
 184:	2b b3       	in	r18, 0x1b	; 27
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <dio_vidWriteChannel+0x3a>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <dio_vidWriteChannel+0x36>
 194:	82 2b       	or	r24, r18
 196:	8b bb       	out	0x1b, r24	; 27
 198:	08 95       	ret
 19a:	41 11       	cpse	r20, r1
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <dio_vidWriteChannel+0x60>
 19e:	28 b3       	in	r18, 0x18	; 24
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <dio_vidWriteChannel+0x54>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <dio_vidWriteChannel+0x50>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	08 95       	ret
 1b6:	28 b3       	in	r18, 0x18	; 24
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <dio_vidWriteChannel+0x6c>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <dio_vidWriteChannel+0x68>
 1c6:	82 2b       	or	r24, r18
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	08 95       	ret
 1cc:	41 11       	cpse	r20, r1
 1ce:	0c c0       	rjmp	.+24     	; 0x1e8 <dio_vidWriteChannel+0x92>
 1d0:	25 b3       	in	r18, 0x15	; 21
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <dio_vidWriteChannel+0x86>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <dio_vidWriteChannel+0x82>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	85 bb       	out	0x15, r24	; 21
 1e6:	08 95       	ret
 1e8:	25 b3       	in	r18, 0x15	; 21
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <dio_vidWriteChannel+0x9e>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <dio_vidWriteChannel+0x9a>
 1f8:	82 2b       	or	r24, r18
 1fa:	85 bb       	out	0x15, r24	; 21
 1fc:	08 95       	ret
 1fe:	41 11       	cpse	r20, r1
 200:	0c c0       	rjmp	.+24     	; 0x21a <dio_vidWriteChannel+0xc4>
 202:	22 b3       	in	r18, 0x12	; 18
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <dio_vidWriteChannel+0xb8>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <dio_vidWriteChannel+0xb4>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	82 bb       	out	0x12, r24	; 18
 218:	08 95       	ret
 21a:	22 b3       	in	r18, 0x12	; 18
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <dio_vidWriteChannel+0xd0>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <dio_vidWriteChannel+0xcc>
 22a:	82 2b       	or	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	89 f0       	breq	.+34     	; 0x256 <dio_vidFlipChannel+0x26>
 234:	28 f0       	brcs	.+10     	; 0x240 <dio_vidFlipChannel+0x10>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	c9 f0       	breq	.+50     	; 0x26c <dio_vidFlipChannel+0x3c>
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	11 f1       	breq	.+68     	; 0x282 <dio_vidFlipChannel+0x52>
 23e:	08 95       	ret
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 240:	2b b3       	in	r18, 0x1b	; 27
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <dio_vidFlipChannel+0x1c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <dio_vidFlipChannel+0x18>
 250:	82 27       	eor	r24, r18
 252:	8b bb       	out	0x1b, r24	; 27
		break;
 254:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <dio_vidFlipChannel+0x32>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <dio_vidFlipChannel+0x2e>
 266:	82 27       	eor	r24, r18
 268:	88 bb       	out	0x18, r24	; 24
		break;
 26a:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 26c:	25 b3       	in	r18, 0x15	; 21
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <dio_vidFlipChannel+0x48>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <dio_vidFlipChannel+0x44>
 27c:	82 27       	eor	r24, r18
 27e:	85 bb       	out	0x15, r24	; 21
		break;
 280:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <dio_vidFlipChannel+0x5e>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <dio_vidFlipChannel+0x5a>
 292:	82 27       	eor	r24, r18
 294:	82 bb       	out	0x12, r24	; 18
 296:	08 95       	ret

00000298 <led_init>:
		#endif
		break;
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	67 e0       	ldi	r22, 0x07	; 7
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_vidConfigChannel>
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	64 e0       	ldi	r22, 0x04	; 4
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_vidConfigChannel>
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	65 e0       	ldi	r22, 0x05	; 5
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_vidConfigChannel>
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	66 e0       	ldi	r22, 0x06	; 6
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 3e 00 	call	0x7c	; 0x7c <dio_vidConfigChannel>
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	67 e0       	ldi	r22, 0x07	; 7
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 ab 00 	call	0x156	; 0x156 <dio_vidWriteChannel>
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	64 e0       	ldi	r22, 0x04	; 4
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 ab 00 	call	0x156	; 0x156 <dio_vidWriteChannel>
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	65 e0       	ldi	r22, 0x05	; 5
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 ab 00 	call	0x156	; 0x156 <dio_vidWriteChannel>
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	66 e0       	ldi	r22, 0x06	; 6
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 ab 00 	call	0x156	; 0x156 <dio_vidWriteChannel>
 2e8:	08 95       	ret

000002ea <led_toggle>:
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_toggle(led_id_t ledId)
{
	switch(ledId)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	59 f0       	breq	.+22     	; 0x304 <led_toggle+0x1a>
 2ee:	28 f0       	brcs	.+10     	; 0x2fa <led_toggle+0x10>
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	69 f0       	breq	.+26     	; 0x30e <led_toggle+0x24>
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	81 f0       	breq	.+32     	; 0x318 <led_toggle+0x2e>
 2f8:	08 95       	ret
	{
		case LED_RED:
		
			dio_vidFlipChannel(LED_RED_PORT,LED_RED_CHANNEL);	
 2fa:	67 e0       	ldi	r22, 0x07	; 7
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 18 01 	call	0x230	; 0x230 <dio_vidFlipChannel>
		break;
 302:	08 95       	ret
		
		case LED_GREEN:
			dio_vidFlipChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL);
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 18 01 	call	0x230	; 0x230 <dio_vidFlipChannel>
		break;
 30c:	08 95       	ret
		
		case LED_BLUE:
			dio_vidFlipChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL);
 30e:	65 e0       	ldi	r22, 0x05	; 5
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 18 01 	call	0x230	; 0x230 <dio_vidFlipChannel>

		break;
 316:	08 95       	ret
		
		case LED_YELLOW:
			dio_vidFlipChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL);
 318:	66 e0       	ldi	r22, 0x06	; 6
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 18 01 	call	0x230	; 0x230 <dio_vidFlipChannel>
 320:	08 95       	ret

00000322 <toggle_led_void_TMR0_overflow>:
}

void toggle_led_void_TMR0_overflow (void)
{
	
	if(counter == 3)
 322:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	19 f4       	brne	.+6      	; 0x330 <toggle_led_void_TMR0_overflow+0xe>
	{
		led_toggle(LED_GREEN);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 75 01 	call	0x2ea	; 0x2ea <led_toggle>
		counter ==0 ;
	}
	counter ++;
 330:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 33a:	08 95       	ret

0000033c <main>:
void toggle_led_void_TMR0_overflow (void);

u8 counter = 0;
int main(void)
{
	led_init();
 33c:	0e 94 4c 01 	call	0x298	; 0x298 <led_init>
	TIMER0_void_Init();
 340:	0e 94 20 02 	call	0x440	; 0x440 <TIMER0_void_Init>
	SET_GIE();
 344:	0e 94 18 02 	call	0x430	; 0x430 <SET_GIE>
	TIMER0_void_SetOVCallBack(toggle_led_void_TMR0_overflow);
 348:	81 e9       	ldi	r24, 0x91	; 145
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 c5 01 	call	0x38a	; 0x38a <TIMER0_void_SetOVCallBack>
	TIMER0_void_EnableOVInt();
 350:	0e 94 c1 01 	call	0x382	; 0x382 <TIMER0_void_EnableOVInt>
 354:	ff cf       	rjmp	.-2      	; 0x354 <main+0x18>

00000356 <TIMER0_void_Config>:
#include "TMR0_CFG.h"

void TIMER0_void_Config(void)
{
	#if(TIMER0_MODE == TIMER0_NORMAL)
		CLEAR_BIT(TCCR0 , 6);
 356:	83 b7       	in	r24, 0x33	; 51
 358:	8f 7b       	andi	r24, 0xBF	; 191
 35a:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0 , 3);
 35c:	83 b7       	in	r24, 0x33	; 51
 35e:	87 7f       	andi	r24, 0xF7	; 247
 360:	83 bf       	out	0x33, r24	; 51
	#elif(TIMER0_PRESCALER == TIMER0_DIV_BY_256 )
		CLEAR_BIT(TCCR0 , 0);
		CLEAR_BIT(TCCR0 , 1);
		SET_BIT(TCCR0 , 2);
	#elif(TIMER0_PRESCALER == TIMER0_DIV_BY_1024 )
		SET_BIT(TCCR0 , 0);
 362:	83 b7       	in	r24, 0x33	; 51
 364:	81 60       	ori	r24, 0x01	; 1
 366:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0 , 1);
 368:	83 b7       	in	r24, 0x33	; 51
 36a:	8d 7f       	andi	r24, 0xFD	; 253
 36c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 2);
 36e:	83 b7       	in	r24, 0x33	; 51
 370:	84 60       	ori	r24, 0x04	; 4
 372:	83 bf       	out	0x33, r24	; 51
	#endif
	
	
	#if(TIMER0_COM_EVENT == TIMER0_NO_ACTION)
		CLEAR_BIT(TCCR0 , 4);
 374:	83 b7       	in	r24, 0x33	; 51
 376:	8f 7e       	andi	r24, 0xEF	; 239
 378:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0 , 5);
 37a:	83 b7       	in	r24, 0x33	; 51
 37c:	8f 7d       	andi	r24, 0xDF	; 223
 37e:	83 bf       	out	0x33, r24	; 51
 380:	08 95       	ret

00000382 <TIMER0_void_EnableOVInt>:
	TIMER0_OV_CallBack = Copy_ptr ;
}

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) )
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 382:	89 b7       	in	r24, 0x39	; 57
 384:	81 60       	ori	r24, 0x01	; 1
 386:	89 bf       	out	0x39, r24	; 57
 388:	08 95       	ret

0000038a <TIMER0_void_SetOVCallBack>:
 38a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <TIMER0_OV_CallBack+0x1>
 38e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TIMER0_OV_CallBack>
 392:	08 95       	ret

00000394 <__vector_11>:
	
}

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 3b6:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <TIMER0_OV_CallBack>
 3ba:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <TIMER0_OV_CallBack+0x1>
 3be:	09 95       	icall
}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 404:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <TIMER0_CTC_CallBack>
 408:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <TIMER0_CTC_CallBack+0x1>
 40c:	09 95       	icall
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <SET_GIE>:


/***************************************************/
void SET_GIE (void)
{
	SET_BIT(SREG,7);
 430:	8f b7       	in	r24, 0x3f	; 63
 432:	80 68       	ori	r24, 0x80	; 128
 434:	8f bf       	out	0x3f, r24	; 63
 436:	08 95       	ret

00000438 <RST_GIE>:
}
void RST_GIE (void)
{
	CLEAR_BIT(SREG,7);
 438:	8f b7       	in	r24, 0x3f	; 63
 43a:	8f 77       	andi	r24, 0x7F	; 127
 43c:	8f bf       	out	0x3f, r24	; 63
 43e:	08 95       	ret

00000440 <TIMER0_void_Init>:
void (*TIMER0_OV_CallBack) (void) ;
void (*TIMER0_CTC_CallBack) (void) ;

void TIMER0_void_Init(void)
{
	TIMER0_void_Config();
 440:	0e 94 ab 01 	call	0x356	; 0x356 <TIMER0_void_Config>
	
	
	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , 0);
 444:	89 b7       	in	r24, 0x39	; 57
 446:	8e 7f       	andi	r24, 0xFE	; 254
 448:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMSK , 1);
 44a:	89 b7       	in	r24, 0x39	; 57
 44c:	8d 7f       	andi	r24, 0xFD	; 253
 44e:	89 bf       	out	0x39, r24	; 57
	RST_GIE();
 450:	0e 94 1c 02 	call	0x438	; 0x438 <RST_GIE>
	
	/*CLEAR FLAGS*/
	SET_BIT(TIFR , 0);
 454:	88 b7       	in	r24, 0x38	; 56
 456:	81 60       	ori	r24, 0x01	; 1
 458:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR , 1);
 45a:	88 b7       	in	r24, 0x38	; 56
 45c:	82 60       	ori	r24, 0x02	; 2
 45e:	88 bf       	out	0x38, r24	; 56
	/*Clear register*/
	TCNT0 = 0 ;
 460:	12 be       	out	0x32, r1	; 50
	OCR0 = 0 ;
 462:	1c be       	out	0x3c, r1	; 60
 464:	08 95       	ret

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
